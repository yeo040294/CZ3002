import React, { Component } from 'react'
import Navbar from '../../components/Admin/Navbar'
import Footer from '../../components/share/Footer';
import { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBFormInline, MDBCard, MDBCardBody } from 'mdbreact';
import Cookies from 'js-cookie';
import CreateQues from '../../components/Admin/CreateQues';
import { updateQuestion, createQuestion } from '../../Redux/Actions/QuestionAction';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import '../../styling/admin_createqn.css';
import '../../styling/index.css';



class QuestionCreation extends Component {
    state = {
        difficultylevel: '',
        image1: '',
        image2: '',
        identical: ''
    }


    //questionid ?
    //This will be auto generated by the backend, if he complain.
    //Tell him, what so difficult to put AUTO INCREMENT?


    pictureload1 = (pic1) => {
        this.setState({ image1: pic1 });
    }

    pictureload2 = (pic2) => {
        this.setState({ image2: pic2 });
    }

    onSubmit = (difficultylevel, image1, image2, identical) => {
        if (image1.includes('null') || image2.includes('null') || difficultylevel.includes("Select")) { alert("Please ensure that there are no empty inputs.") }
        else {

            if (difficultylevel == "Easy") {
                difficultylevel = '0'
            } else if (difficultylevel == "Medium") {
                difficultylevel = '1'
            } else if (difficultylevel == "Hard") {
                difficultylevel = '2'
            }

            if (identical == "Yes") {
                identical = '1'
            } else if (identical == "No") {
                identical = '0'
            }

            let sessionID = Cookies.get('sessionid')
            this.setState({ answer: identical, difficulty: difficultylevel, image1: image1, image2: image2 })
            let form = {
                sessionid: sessionID,
            }
            this.props.createQuestion(form);
        }
    }
    updateQuestion = (questionid) => {
        let sessionID = Cookies.get('sessionid')
        let form = {
            sessionid: sessionID,
            questionid: questionid,
            qnimg1: this.state.image1.slice(22),
            qnimg2: this.state.image2.slice(22),
            answer: parseInt(this.state.answer),
            difficulty: parseInt(this.state.difficulty)
        }
        console.log(form)
        this.props.updateQuestion(form);
        this.props.history.push('/admin/assign/result')
    }

    componentDidUpdate(prevProps) {
        console.log(this.props.questionbank)
        if (this.props.questionbank.status === 'success')
            this.updateQuestion(this.props.questionbank.questionid)
    }
    render() {
        return (
            <div id="admin-qr-container">
                <Navbar />
                <div id="admin-qr-body">
                    <MDBContainer fluid>
                        <MDBRow>
                            <MDBCol id="admin-qr-form" md="10">
                                <MDBCard>
                                    <MDBCardBody>
                                        <p className="h3 text-center py-4">Upload Question</p>
                                        <CreateQues onSubmit={this.onSubmit} pictureload1={this.pictureload1} pictureload2={this.pictureload2} />
                                    </MDBCardBody>
                                </MDBCard>
                            </MDBCol>
                        </MDBRow>
                    </MDBContainer>
                </div>
                <Footer />
            </div>
        )
    }
}

QuestionCreation.propTypes = {
    createQuestion: PropTypes.func.isRequired,
    updateQuestion: PropTypes.func.isRequired,
}

const mapStateToProps = (state, ownProps) => ({
    questionbank: state.quest.question,

})

export default connect(mapStateToProps, { createQuestion, updateQuestion })(QuestionCreation)
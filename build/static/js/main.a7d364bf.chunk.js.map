{"version":3,"sources":["assets/logo.svg","Redux/Actions/UsersAction.jsx","components/share/Navbar.jsx","pages/Home.jsx","components/Medical/QuestionList.jsx","pages/Patient/patientGamepage.jsx","Redux/Actions/PatientAction.jsx","components/Patient/Navbar.jsx","pages/Patient/patientHome.jsx","components/share/Footer.jsx","components/Patient/PatientResult/ResultTable.jsx","Redux/Actions/QuestionAction.jsx","pages/Patient/Result.jsx","components/Admin/Navbar.jsx","pages/Admin/Home.jsx","components/Medical/Navbar.jsx","components/Medical/PatientList.jsx","pages/Medical/MedicalHome.jsx","pages/Medical/ViewPatientResults.jsx","components/Admin/AccountForm.jsx","pages/Admin/AccountCreation.jsx","pages/Admin/UploadQuestion.jsx","pages/Medical/medicalAssign.jsx","pages/Medical/medicalAssignAuto.jsx","components/share/PicUpload.jsx","components/Admin/CreateQues.jsx","pages/Admin/QuestionCreation.jsx","pages/Medical/AssignResult.jsx","pages/Logout.jsx","pages/Profile.jsx","router/Routes.js","Redux/Reducers/TwitterReducers.jsx","Redux/Reducers/QuestionReducer.jsx","Redux/Reducers/UserReducer.jsx","Redux/Reducers/PatientReducer.jsx","Redux/Reducers/RootReducer.jsx","Redux/Store/Store.jsx","App.js","registerServiceWorker.js","index.js"],"names":["server","Navbar","state","collapseID","toggleCollapse","setState","prevState","closeCollapse","collID","window","scrollTo","this","color","dark","expand","fixed","scrolling","href","className","onClick","id","isOpen","navbar","right","exact","to","Component","Home","props","handleUsernameChange","event","username","target","value","handlePasswordChange","password","handleSubmit","preventDefault","logIn","role","Cookies","get","history","push","md","htmlFor","type","onChange","connect","ownProps","data","quest","results","dispatch","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","redirect","fetch","then","response","json","result","set","userid","path","sessionid","QuestionList","submit","questionList","map","x","img_src1","qnimg1","img_src2","qnimg2","e","questionid","src","quimg1","size","patientGamepage","RetrieveData","fetchPatientResult","console","log","patient","display","sessionID","userID","res","payload","light","nav","caret","icon","patientHome","RetrieveQuestion","fetchDifficulty","assignments","difficulty","fluid","style","width","marginTop","assignmentid","questions","ResultTable","striped","resultid","qnscorrect","qnsanswered","attemptdatetime","completiontime","fetchResults","Result","Login","navigate","patientList","assign","view","scrollY","displayname","uuid","MedicalHome","uid","assignUserid","fetchAllUser","PatientList","users","user","ViewPatientResults","location","pathname","split","prevProps","snapShot","AccountForm","onSubmit","useState","name","setName","setUsername","setPassword","usertype","setUsertype","label","basic","divider","outline","AccountCreation","some","includes","alert","userrole","form","createAcc","status","postData","UploadQuestion","waves","medicalAssign","questionType","checkValidUser","textChange","onClickHandler","innerHTML","handleDifficultyChange","handleQuestionTypeChange","AssignPatient","assignDifficulty","medicalAssignAuto","assignQuestionList","assignPatient","autoAssign","len","length","questionNumber","Math","floor","random","fetchAllQuestion","PicUpload","file","onChangeHandleFile","files","reader","FileReader","readAsDataURL","addEventListener","url","picUpload","inputs","containerClassName","CreateQues","difficultylevel","setDifficulty","identical","setIdentical","picture1","setPicture1","picture2","setPicture2","QuestionCreation","image1","image2","pictureload1","pic1","pictureload2","pic2","answer","createQuestion","updateQuestion","questionbank","question","AssignResult","item","Logout","remove","Profile","patientNav","staffNav","adminNav","Routes","component","adminHome","medicalView","medicalHome","render","React","initState","items","TwitterReducers","action","QuestionReducer","UserReducer","PatientReducers","RootReducer","combineReducers","twitter","PatientReducer","middleWare","thunk","store","createStore","applyMiddleware","App","Store","Date","getFullYear","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","document","getElementById","URL","process","origin","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6QAoCe,IADf,I,gBCnCMA,EAAS,sBCkHAC,E,4MA9GXC,MAAQ,CACJC,WAAY,I,EAGdC,eAAiB,SAAAD,GAAU,OAAI,kBAC7B,EAAKE,UAAS,SAAAC,GAAS,MAAK,CAC1BH,WAAYG,EAAUH,aAAeA,EAAaA,EAAa,S,EAGnEI,cAAgB,SAAAC,GAAM,OAAI,WAAO,IACvBL,EAAe,EAAKD,MAApBC,WACRM,OAAOC,SAAS,EAAG,GACnBP,IAAeK,GAAU,EAAKH,SAAS,CAAEF,WAAY,O,uDAG/C,IACEA,EAAeQ,KAAKT,MAApBC,WAKOQ,KAAKP,eAAe,sBAGnC,OACI,8BACA,eAAC,IAAD,CAAWQ,MAAM,SAASC,MAAI,EAACC,OAAO,KAAKC,MAAM,MAAMC,WAAS,EAAhE,UACE,cAAC,IAAD,CAAgBC,KAAK,IAAIC,UAAU,0BAEnC,cAAC,IAAD,CACEC,QAASR,KAAKP,eAAe,wBAE/B,cAAC,IAAD,CAAagB,GAAG,qBAAqBC,OAAQlB,EAAYmB,QAAM,EAA/D,SACE,eAAC,IAAD,CAAcC,OAAK,EAAnB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,OAAK,EACLC,GAAG,IACHN,QAASR,KAAKJ,cAAc,sBAH9B,SAKE,8CAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CACEY,QAASR,KAAKJ,cAAc,sBAC5BkB,GAAG,SAFL,SAIE,+CAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CACEN,QAASR,KAAKJ,cAAc,sBAC5BkB,GAAG,WAFL,SAIE,sDAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CACEN,QAASR,KAAKJ,cAAc,sBAC5BkB,GAAG,WAFL,SAIE,sDAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CACEN,QAASR,KAAKJ,cAAc,sBAC5BkB,GAAG,SAFL,SAIE,kE,GAzEDC,a,iBCWfC,G,wDACF,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAuBRC,qBAAuB,SAACC,GACtB,EAAKzB,SAAS,CACZ0B,SAAUD,EAAME,OAAOC,SA1BR,EA6BnBC,qBAAuB,SAACJ,GACtB,EAAKzB,SAAS,CACZ8B,SAAUL,EAAME,OAAOC,SA/BR,EAkCnBG,aAAe,SAACN,GACdA,EAAMO,iBACN,EAAKT,MAAMU,MAAM,EAAKpC,MAAM6B,SAAU,EAAK7B,MAAMiC,UACjD,IAAII,EAAOC,IAAQC,IAAI,QACX,GAARF,EACF,EAAKX,MAAMc,QAAQC,KAAK,YAET,GAARJ,EACP,EAAKX,MAAMc,QAAQC,KAAK,YAET,GAARJ,GACP,EAAKX,MAAMc,QAAQC,KAAK,WA3C1B,EAAKzC,MAAQ,CACV6B,SAAU,GACVI,SAAU,IAJI,E,gEASjB,IAAII,EAAOC,IAAQC,IAAI,QACPD,IAAQC,IAAI,eAEZ,GAARF,EACF5B,KAAKiB,MAAMc,QAAQC,KAAK,YAET,GAARJ,EACP5B,KAAKiB,MAAMc,QAAQC,KAAK,YAET,GAARJ,GACP5B,KAAKiB,MAAMc,QAAQC,KAAK,a,+BA8BtB,IAAD,EACsBhC,KAAKT,MAA3B6B,EADA,EACAA,SAAUI,EADV,EACUA,SACf,OACE,eAAC,IAAD,CAAcjB,UAAU,KAAxB,UACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAASA,UAAU,QAAQ0B,GAAG,IAA9B,SACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAa1B,UAAU,OAAvB,UACE,oBAAIA,UAAU,sBAAd,yCACA,mBAAGA,UAAU,QAAb,mBAEA,uBAAMC,QAASR,KAAKyB,aAApB,UACE,uBAAOS,QAAQ,WAAf,sBACA,uBACEC,KAAK,OACL1B,GAAG,wBACHF,UAAU,eACVe,MAAOF,EACPgB,SAAUpC,KAAKkB,uBAEjB,uBAAOX,UAAU,MAAM2B,QAAQ,WAA/B,sBACA,uBACEC,KAAK,OACL1B,GAAG,wBACHF,UAAU,eACVe,MAAOE,EACPY,SAAUpC,KAAKuB,uBAEnB,qBAAKhB,UAAU,mBAAf,SACE,cAAC,IAAD,CAAQA,UAAU,OAAO4B,KAAK,SAA9B,yC,GAhFHpB,cAiGJsB,eAJS,SAAC9C,EAAO+C,GAAR,MAAsB,CAC5CC,KAAMhD,EAAMiD,MAAMC,WAGoB,CAAEd,MF7GrB,SAACP,EAAUI,GAAX,OAAwB,SAAAkB,GACzC,IAAIC,EAAY,IAAIC,QACpBD,EAAUE,OAAO,eAAgB,cACjC,IAAIN,EAAO,CACP,SAAYnB,EACZ,SAAYI,GAEZsB,EAAiB,CACjBC,OAAQ,OACRC,QAASL,EACTM,KAAMC,KAAKC,UAAUZ,GACrBa,SAAU,UAEdC,MAAM,gDAAiDP,GAClDQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ5B,QAAQ6B,IAAI,SAASD,EAAOE,OAAQ,CAACC,KAAM,MAC3C/B,QAAQ6B,IAAI,YAAYD,EAAOI,UAAW,CAACD,KAAM,MACjD/B,QAAQ6B,IAAI,OAAOD,EAAO7B,KAAM,CAACgC,KAAM,YE2FlCvB,CAAqCrB,GC5GvC8C,EAAe,SAAC,GAAsB,IAApBvB,EAAmB,EAAnBA,KAAMwB,EAAa,EAAbA,OAC7BC,EAAe,GAEnB,OACI,8BACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,+BACI,wCACA,iDACA,kDACA,uDAGR,eAAC,IAAD,WACKzB,GAAQA,EAAK0B,KAAI,SAAAC,GACd,IAAIC,EAAW,0BAA4BD,EAAEE,OACzCC,EAAW,0BAA4BH,EAAEI,OAC7C,OACI,+BACI,6BAAI,uBACAnC,KAAK,WACL5B,UAAU,mBACVE,GAAG,oBACH2B,SAAU,SAACmC,GAAD,OAAOP,EAAahC,KAAKkC,EAAEM,iBAEzC,6BAAKN,EAAEM,aACP,6BAAI,qBAAKC,IAAKN,MACd,6BAAI,qBAAKM,IAAKJ,QATTH,EAAEQ,WAcnB,cAAC,IAAD,CAAQC,KAAK,KAAK1E,MAAM,OAAOO,QAAS,kBAAMuD,EAAOC,IAArD,+BC5BdY,E,4MAIFC,aAAe,WACX,IAAIhB,EAAYhC,IAAQC,IAAI,aACxB6B,EAAS9B,IAAQC,IAAI,UACzB,EAAKb,MAAM6D,mBAAmBjB,EAAUF,I,kEALxC3D,KAAK6E,iB,+BAQL,IAAIpB,EAASzD,KAAKiB,MAAMwC,OAAOhB,QAE/B,OADAsC,QAAQC,IAAIvB,GAER,8BACI,eAAC,IAAD,WACA,cAAC,EAAD,IACA,mBAAIlD,UAAU,sBAAd,8CACA,uBACA,mBAAIA,UAAU,sBAAd,wC,GAlBcQ,aAgCfsB,eAHS,SAAC9C,EAAO+C,GAAR,MAAsB,CAC1CmB,OAAQlE,EAAM0F,QAAQC,WAEc,CAAEJ,mBCzBR,SAACK,EAAWC,GAAZ,OAAuB,SAAA1C,GAErDW,MAAM,gEADO,cAAgB8B,EAAY,WAAaC,IAEjD9B,MAAK,SAAA+B,GAAG,OAAIA,EAAI7B,UAChBF,MAAK,SAAAf,GAAI,OAAIG,EAAS,CACnBP,KAAM,mBACNmD,QAAS/C,UDmBNF,CAAiDuC,GEuCjDtF,E,4MA1EXC,MAAQ,CACJC,WAAY,I,EAGhBC,eAAiB,SAAAD,GAAU,OAAI,kBAC3B,EAAKE,UAAS,SAAAC,GAAS,MAAK,CACxBH,WAAYG,EAAUH,aAAeA,EAAaA,EAAa,S,EAGvEI,cAAgB,SAAAC,GAAM,OAAI,WAAO,IACrBL,EAAe,EAAKD,MAApBC,WACRM,OAAOC,SAAS,EAAG,GACnBP,IAAeK,GAAU,EAAKH,SAAS,CAAEF,WAAY,O,uDAG/C,IACEA,EAAeQ,KAAKT,MAApBC,WAKSQ,KAAKP,eAAe,sBAGrC,OACI,8BACI,eAAC,IAAD,CAAW8F,OAAK,EAACpF,OAAO,KAAKC,MAAM,MAAMC,WAAS,EAAlD,UACI,cAAC,IAAD,CAAgBC,KAAK,IAAIC,UAAU,0BAEnC,cAAC,IAAD,CAAkBA,UAAU,UACxBC,QAASR,KAAKP,eAAe,wBAEjC,cAAC,IAAD,CAAagB,GAAG,qBAAqBC,OAAQlB,EAAYmB,QAAM,EAA/D,SACI,eAAC,IAAD,CAAcC,OAAK,EAAnB,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CACIC,OAAK,EACLC,GAAG,WACHN,QAASR,KAAKJ,cAAc,sBAHhC,SAKI,8CAGR,cAAC,IAAD,UACI,cAAC,IAAD,CACIY,QAASR,KAAKJ,cAAc,sBAC5BkB,GAAG,WAFP,SAII,iDAIR,cAAC,IAAD,UACI,eAAC,IAAD,WACI,eAAC,IAAD,CAAmB0E,KAAG,EAACC,OAAK,EAA5B,UACI,cAAC,IAAD,CAASC,KAAK,SADlB,IAC6B,aAE7B,eAAC,IAAD,CAAiBnF,UAAU,mBAA3B,UACI,cAAC,IAAD,CAAiBD,KAAK,WAAtB,qBACA,cAAC,IAAD,CAAiBA,KAAK,UAAtB,0C,GA5DnBS,aCSf4E,GCV8B5E,Y,4MDchC6E,iBAAmB,WACf,IAAIT,EAAYtD,IAAQC,IAAI,aACxBsD,EAASvD,IAAQC,IAAI,UACzB,EAAKb,MAAM4E,gBAAgBV,EAAWC,I,kEALtCpF,KAAK4F,qB,+BAQL,IAAIE,EAAc9F,KAAKiB,MAAM8E,WAAWD,YACxC,OACI,gCACI,cAAC,EAAD,IACA,qBAAKvF,UAAU,SAAf,SACI,uCAGJ,cAAC,IAAD,CAAcyF,OAAK,EAAnB,SACI,qBAAKzF,UAAU,OAAf,SACA,cAAC,IAAD,UACI,cAAC,IAAD,CAASA,UAAU,UAAU0B,GAAG,IAAhC,SACI,cAAC,IAAD,UACI,eAAC,IAAD,WACA,mBAAG1B,UAAU,sBAAb,8CACA,uBACA,mBAAGA,UAAU,sBAAb,2BACCuF,GAAeA,EAAY7B,KAAI,SAAAC,GAC5B,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAQS,KAAK,IAAb,SACI,eAAC,IAAD,CAASsB,MAAO,CAAEC,MAAO,QAASC,UAAW,QAA7C,UACI,eAAC,IAAD,CAAelG,MAAM,iBAArB,4BAAsDiE,EAAEkC,gBACxD,eAAC,IAAD,WACI,cAAC,IAAD,UAAelC,EAAEmC,YACjB,cAAC,IAAD,oGAW5B,qBAAK9F,UAAU,mBAAf,SACI,cAAC,IAAD,CAAQA,UAAU,OAAlB,6C,GAhDVQ,cAsEXsB,eAHS,SAAC9C,EAAO+C,GAAR,MAAsB,CAC1CyD,WAAYxG,EAAM0F,QAAQC,WAEU,CAAEW,gBF/EX,SAACV,EAAWC,GAAZ,OAAuB,SAAA1C,GAElDW,MAAM,0DADO,cAAgB8B,EAAY,WAAaC,IAEjD9B,MAAK,SAAA+B,GAAG,OAAIA,EAAI7B,UAChBF,MAAK,SAAAf,GAAI,OAAIG,EAAS,CACnBP,KAAM,mBACNmD,QAAS/C,UEyENF,CAA8CsD,GE9C9CW,EAjCK,SAAC,GAAe,IAAd7D,EAAa,EAAbA,QAElB,OACI,8BAEI,eAAC,IAAD,CAAU8D,SAAO,EAAjB,UACI,cAAC,IAAD,UACI,+BACI,+CACA,kDACA,uCACA,sCACA,+CAGR,cAAC,IAAD,UACK9D,GAAWA,EAAQwB,KAAI,SAAAC,GACpB,OACI,+BACI,6BAAKA,EAAEsC,WACP,6BAAK,SACL,uCAAQtC,EAAEuC,WAAV,YAAwBvC,EAAEwC,eAC1B,6BAAKxC,EAAEyC,kBACP,6BAA0B,OAArBzC,EAAE0C,eAA0B,OAAS1C,EAAE0C,mBALvC1C,EAAEsC,qBCpB1BK,EAAe,SAAClD,EAAOE,GAAR,OAAsB,SAAAnB,GAC9CW,MAAM,oFAAoEQ,EAApE,mBAAwFF,IACzFL,MAAK,SAAA+B,GAAG,OAAIA,EAAI7B,UAChBF,MAAK,SAAAf,GAAI,OAAIG,EAAS,CACnBP,KAAM,gBACNmD,QAAS/C,SCEfuE,E,kLAOE9G,KAAKiB,MAAM4F,aAAahF,IAAQC,IAAI,UAAUD,IAAQC,IAAI,gB,+BAS1D,OACI,gCACI,cAAC,EAAD,IACA,eAAC,IAAD,WACA,qDACA,uBACE9B,KAAKiB,MAAMsB,MAAS,cAAC,EAAD,CAAaE,QAASzC,KAAKiB,MAAMsB,KAAKE,oB,GAtBvD1B,aAqCNsB,eAJS,SAAC9C,EAAO+C,GAAR,MAAsB,CAC1CC,KAAMhD,EAAMiD,MAAMC,WAGkB,CAAEoE,gBAA3BxE,CAA2CyE,GCuB3CxH,E,4MAjEbC,MAAQ,CACNC,WAAY,I,EAGdC,eAAiB,SAAAD,GAAU,OAAI,kBAC7B,EAAKE,UAAS,SAAAC,GAAS,MAAK,CAC1BH,WAAYG,EAAUH,aAAeA,EAAaA,EAAa,S,EAGnEI,cAAgB,SAAAC,GAAM,OAAI,WAAO,IACvBL,EAAe,EAAKD,MAApBC,WACRM,OAAOC,SAAS,EAAG,GACnBP,IAAeK,GAAU,EAAKH,SAAS,CAAEF,WAAY,O,uDAG7C,IACAA,EAAeQ,KAAKT,MAApBC,WAKKQ,KAAKP,eAAe,sBAGjC,OACE,8BACE,eAAC,IAAD,CAAWQ,MAAM,SAASC,MAAI,EAACC,OAAO,KAAKC,MAAM,MAAMC,WAAS,EAAhE,UACE,cAAC,IAAD,CAAgBC,KAAK,IAAIC,UAAU,0BAEnC,cAAC,IAAD,CACEC,QAASR,KAAKP,eAAe,wBAE/B,cAAC,IAAD,CAAagB,GAAG,qBAAqBC,OAAQlB,EAAYmB,QAAM,EAA/D,SACE,eAAC,IAAD,CAAcC,OAAK,EAAnB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,OAAK,EACLC,GAAG,SACHN,QAASR,KAAKJ,cAAc,sBAH9B,SAKE,8CAGJ,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAmB4F,KAAG,EAACC,OAAK,EAA5B,UACE,cAAC,IAAD,CAASC,KAAK,SADhB,IAC2B,aAE3B,eAAC,IAAD,CAAiBnF,UAAU,mBAA3B,UACE,cAAC,IAAD,CAAiBD,KAAK,WAAtB,qBACA,cAAC,IAAD,CAAiBA,KAAK,UAAtB,0C,GAnDCS,aCEAgG,E,4MAEjBC,SAAW,SAACzC,GACR,EAAKtD,MAAMc,QAAQC,KAAnB,iBAAkCuC,EAAElD,OAAOZ,M,uDAK3C,OACI,gCACI,cAAC,EAAD,IACA,eAAC,IAAD,WACI,eAAC,IAAD,WACI,sCACA,0BAEJ,eAAC,IAAD,WACI,cAAC,IAAD,UACI,eAAC,IAAD,CAAQA,GAAG,UAAUR,MAAM,UAAUO,QAASR,KAAKgH,SAAnD,UACI,cAAC,IAAD,CAAStB,KAAK,QAAQnF,UAAU,OAAOoE,KAAK,OADhD,uBAIJ,cAAC,IAAD,UACA,eAAC,IAAD,CAAQlE,GAAG,SAASR,MAAM,UAAUO,QAASR,KAAKgH,SAAlD,UACQ,cAAC,IAAD,CAAStB,KAAK,QAAQnF,UAAU,OAAOoE,KAAK,OADpD,qC,GAvBW5D,aCgEpBzB,E,4MAjEbC,MAAQ,CACNC,WAAY,I,EAGdC,eAAiB,SAAAD,GAAU,OAAI,kBAC7B,EAAKE,UAAS,SAAAC,GAAS,MAAK,CAC1BH,WAAYG,EAAUH,aAAeA,EAAaA,EAAa,S,EAGnEI,cAAgB,SAAAC,GAAM,OAAI,WAAO,IACvBL,EAAe,EAAKD,MAApBC,WACRM,OAAOC,SAAS,EAAG,GACnBP,IAAeK,GAAU,EAAKH,SAAS,CAAEF,WAAY,O,uDAG7C,IACAA,EAAeQ,KAAKT,MAApBC,WAKKQ,KAAKP,eAAe,sBAGjC,OACE,8BACE,eAAC,IAAD,CAAWQ,MAAM,SAASC,MAAI,EAACC,OAAO,KAAKC,MAAM,MAAMC,WAAS,EAAhE,UACE,cAAC,IAAD,CAAgBC,KAAK,IAAIC,UAAU,0BAEnC,cAAC,IAAD,CACEC,QAASR,KAAKP,eAAe,wBAE/B,cAAC,IAAD,CAAagB,GAAG,qBAAqBC,OAAQlB,EAAYmB,QAAM,EAA/D,SACE,eAAC,IAAD,CAAcC,OAAK,EAAnB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,OAAK,EACLC,GAAG,WACHN,QAASR,KAAKJ,cAAc,sBAH9B,SAKE,8CAGJ,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAmB4F,KAAG,EAACC,OAAK,EAA5B,UACE,cAAC,IAAD,CAASC,KAAK,SADhB,IAC2B,aAE3B,eAAC,IAAD,CAAiBnF,UAAU,mBAA3B,UACE,cAAC,IAAD,CAAiBD,KAAK,WAAtB,qBACA,cAAC,IAAD,CAAiBA,KAAK,UAAtB,0C,GAnDCS,aC8BNkG,EA9BK,SAAC,GAA4B,IAA1B1E,EAAyB,EAAzBA,KAAM2E,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAEjC,OACI,8BACI,eAAC,IAAD,CAAUZ,SAAO,EAACa,SAAO,EAAzB,UACI,cAAC,IAAD,UACI,+BACI,2CACA,sCACA,wCACA,8CAGR,cAAC,IAAD,UACK7E,GAAQA,EAAK0B,KAAI,SAAAC,GACd,OACI,+BACI,6BAAKA,EAAE9C,WACP,6BAAuB,OAAlB8C,EAAEmD,YAAuB,OAASnD,EAAEmD,cACzC,6BAAI,cAAC,IAAD,CAAQ1C,KAAK,KAAK1E,MAAM,OAAOO,QAAS,kBAAM0G,EAAOhD,EAAE9C,SAAS8C,EAAEoD,OAAlE,wBACJ,6BAAI,cAAC,IAAD,CAAQ3C,KAAK,KAAK1E,MAAM,OAAOO,QAAS,kBAAM2G,EAAKjD,EAAE9C,SAAS8C,EAAEoD,OAAhE,gCAJCpD,EAAEoD,iBCNjCC,E,4MAIFL,OAAS,SAAC9F,EAASoG,GACf,EAAKvG,MAAMwG,aAAaD,GACxB,EAAKvG,MAAMc,QAAQC,KAAK,IAAKZ,EAAL,WAAoBoG,GAAS,Y,EAGzDL,KAAO,SAAC/F,EAASoG,GACb,EAAKvG,MAAMc,QAAQC,KAAK,IAAKZ,EAAL,WAAoBoG,GAAQ,U,kEARpDxH,KAAKiB,MAAMyG,aAAa,EAAE7F,IAAQC,IAAI,gB,+BAYtC,OACI,gCACI,cAAC,EAAD,IACA,eAAC,IAAD,mDAGC9B,KAAKiB,MAAMsB,MAAQ,cAACoF,EAAD,CAAapF,KAAMvC,KAAKiB,MAAMsB,KAAKqF,MAAOV,OAAUlH,KAAKkH,OAAQC,KAAQnH,KAAKmH,iB,GApBxFpG,aAkCXsB,eAJS,SAAA9C,GAAK,MAAK,CAC9BgD,KAAMhD,EAAMsI,KAAKtF,QAGmB,CAAEmF,ahBvBd,SAAC9F,EAAKiC,GAAN,OAAoB,SAAAnB,GAC5CW,MAAM,UAAWhE,EAAX,4CAAyDwE,EAAzD,iBAA2EjC,IAC5E0B,MAAK,SAAA+B,GAAG,OAAIA,EAAI7B,UAChBF,MAAK,SAAAf,GAAI,OAAIG,EAAS,CACnBP,KAAM,YACNmD,QAAS/C,SgBkBmCkF,aXrB5B,SAAC9D,GAAD,OAAY,SAAAjB,GACpCA,EAAS,CACLP,KAAM,gBACNwB,OAAQA,OWkBDtB,CAAyDkF,GCtClEO,E,4MACFvI,MAAQ,CACJ6B,SAAU,GACVuC,OAAQ,I,kEAGR3D,KAAKN,SAAS,CACV0B,SAAUpB,KAAKiB,MAAMc,QAAQgG,SAASC,SAASC,MAAM,KAAK,GAC1DtE,OAAO3D,KAAKiB,MAAMc,QAAQgG,SAASC,SAASC,MAAM,KAAK,O,yCAG5CC,EAAUvI,EAAUwI,GAC/BnI,KAAKT,MAAMoE,SAAWhE,EAAUgE,QAChC3D,KAAKiB,MAAM4F,aAAa7G,KAAKT,MAAMoE,OAAQ9B,IAAQC,IAAI,gB,+BAI3D,OACI,gCACI,cAAC,EAAD,IACA,eAAC,IAAD,WAEI,2CAAc9B,KAAKT,MAAM6B,YACzB,uBACCpB,KAAKiB,MAAMsB,MAAQ,cAAC,EAAD,CAAaE,QAASzC,KAAKiB,MAAMsB,KAAKE,oB,GAxB7C1B,aAuClBsB,eAHS,SAAC9C,EAAO+C,GAAR,MAAsB,CAC1CC,KAAMhD,EAAMiD,MAAMC,WAEkB,CAAEoE,gBAA3BxE,CAA2CyF,G,QCZ3CM,EA/BK,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACRC,mBAAS,IADD,mBACzBC,EADyB,KACnBC,EADmB,OAEAF,mBAAS,IAFT,mBAEzBlH,EAFyB,KAEfqH,EAFe,OAGAH,mBAAS,IAHT,mBAGzB9G,EAHyB,KAGfkH,EAHe,OAIAJ,mBAAS,oBAJT,mBAIzBK,EAJyB,KAIfC,EAJe,KAOhC,OACI,gCACI,cAAC,IAAD,CAAUtH,MAAOiH,EAAMM,MAAM,OAAOnD,KAAK,eAAetD,SAAU,SAAAmC,GAAC,OAAIiE,EAAQjE,EAAElD,OAAOC,UACxF,cAAC,IAAD,CAAUA,MAAOF,EAASyH,MAAM,WAAWnD,KAAK,cAActD,SAAU,SAAAmC,GAAC,OAAIkE,EAAYlE,EAAElD,OAAOC,UAClG,cAAC,IAAD,CAAUa,KAAK,WAAWb,MAAOE,EAAUqH,MAAM,WAAWnD,KAAK,aAAatD,SAAU,SAAAmC,GAAC,OAAImE,EAAYnE,EAAElD,OAAOC,UAClH,eAAC,IAAD,gCAEI,eAAC,IAAD,CAAaqD,KAAK,KAAlB,UACI,cAAC,IAAD,CAAmBrD,MAAOqH,EAAUlD,OAAK,EAACxF,MAAM,UAAhD,SACK0I,IAEL,eAAC,IAAD,CAAiBG,OAAK,EAACtI,QAAU,SAAA+D,GAAC,OAAIqE,EAAYrE,EAAElD,OAAOC,QAA3D,UACI,cAAC,IAAD,CAAiBA,MAAO,UAAxB,qBACA,cAAC,IAAD,CAAiByH,SAAO,IACxB,cAAC,IAAD,CAAiBzH,MAAO,UAAxB,2BAGR,cAAC,IAAD,CAAQ0H,SAAO,EAAC/I,MAAM,UAAU0E,KAAK,KAAKnE,QAAS,kBAAM6H,EAASE,EAAMnH,EAASI,EAASmH,IAA1F,oBACA,cAAC,IAAD,CAAQK,SAAO,EAAC/I,MAAM,SAAS0E,KAAK,KAAKnE,QAAS,WAAOgI,EAAQ,IAAKC,EAAY,IAAIC,EAAY,IAAKE,EAAY,qBAAnH,0BCrBVK,E,4MACF1J,MAAQ,CACJgJ,KAAM,GACNnH,SAAU,GACVI,SAAU,GACVmH,SAAU,I,EAEdN,SAAW,SAACE,EAAMnH,EAAUI,EAAUmH,GAClC,GAAI,CAACJ,EAAMnH,EAAUI,GAAU0H,MAAK,SAAChF,GAAD,MAAa,KAANA,MAAayE,EAASQ,SAAS,UAAaC,MAAM,qDACxF,CACD,IAAIC,EAAuB,WAAZV,EAAwB,IAAkB,WAAZA,EAAwB,IAAM,IAEvEW,EAAO,CACPzF,UAFYhC,IAAQC,IAAI,aAGxBuF,YAAakB,EACbnH,SAAUA,EACVI,SAAUA,EACVI,KAAMyH,GAEV,EAAKpI,MAAMsI,UAAUD,K,iEAIVpB,GACgB,WAA5BlI,KAAKiB,MAAMwC,OAAO+F,QACjBxJ,KAAKiB,MAAMc,QAAQC,KAAK,Y,+BAI5B,OACI,gCACI,cAAC,EAAD,IACA,eAAC,IAAD,WACI,kDACA,uBACA,cAAC,EAAD,CAAaqG,SAAUrI,KAAKqI,qB,GAnClBtH,aAiDfsB,eAHS,SAAC9C,EAAO+C,GAAR,MAAsB,CAC1CmB,OAAQlE,EAAMsI,KAAKtF,QAEiB,CAAEgH,UnBxBjB,SAACE,GAAD,OAAc,SAAA/G,GACnCW,MAAM,UAAWhE,EAAS,uBAAwB,CAC9C0D,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUsG,KAEpBnG,MAAK,SAAA+B,GAAG,OAAIA,EAAI7B,UAChBF,MAAK,SAAAf,GACFG,EAAS,CACLP,KAAM,aACNmD,QAAS/C,UmBYVF,CAAwC4G,GCrDlCS,E,uKAEb,OACI,gCACI,cAAC,EAAD,IACA,eAAC,IAAD,WACA,4DACA,eAAC,IAAD,CAASzD,MAAO,CAAEC,MAAO,SAAzB,UACR,cAAC,IAAD,CAAc3F,UAAU,YAAaoJ,OAAK,IAC1C,eAAC,IAAD,WACE,cAAC,IAAD,IACA,eAAC,IAAD,qBACS,uBADT,2BAMM,iC,GAjB4B5I,a,QCGtC6I,E,4MACFrK,MAAQ,CACJ6B,SAAU,GACVuC,OAAQ,GACRoC,WAAY,OACZ8D,aAAc,a,EAElBC,eAAiB,WAGF,KADAjI,IAAQC,IAAI,SAEnB,EAAKb,MAAMc,QAAQC,KAAK,M,EAGhC+H,WAAa,SAACxF,GACV,EAAK7E,SAAL,eACK6E,EAAElD,OAAOZ,GAAM8D,EAAElD,OAAOC,S,EAGjC0I,eAAiB,SAAA7I,GACb,IAAMG,EAAQH,EAAME,OAAO4I,UAC3B,EAAKvK,SAAS,CAAE4B,W,EAGpB4I,uBAAyB,SAAC/I,GACtB,EAAKzB,SAAS,CACZqG,WAAY5E,EAAME,OAAOC,S,EAI/B6I,yBAA2B,SAAChJ,GACxB,EAAKzB,SAAS,CACZmK,aAAc1I,EAAME,OAAOC,S,EAIjC8I,cAAgB,SAAChJ,EAASuC,GAQtB,EAAK1C,MAAMoJ,iBAAiB,EAAK9K,MAAMwG,YACR,aAA3B,EAAKxG,MAAMsK,aACX,EAAK5I,MAAMc,QAAQC,KAAK,IAAKZ,EAAW,IAAMuC,EAAU,gBAGxD,EAAK1C,MAAMc,QAAQC,KAAK,IAAKZ,EAAY,IAAMuC,EAAU,mB,iEAG9CuE,GACgB,WAA5BlI,KAAKiB,MAAMwC,OAAO+F,QACjBxJ,KAAKiB,MAAMc,QAAQC,KAAK,c,+BAI5B,OACI,gCACI,cAAC,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,GAAG,IAAX,SACI,iCACI,mBAAG1B,UAAU,sBAAb,qCACA,sBAAKA,UAAU,YAAf,UACI,4CACA,yBAAQA,UAAU,gCAAgCe,MAAOtB,KAAKT,MAAMwG,WAAY3D,SAAUpC,KAAKkK,uBAA/F,UACI,wBAAQ5I,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,qBAEJ,uBACA,uBACA,cAAC,IAAD,CAAQd,QAASR,KAAKoK,cAAenK,MAAM,UAA3C,qBACA,cAAC,IAAD,CAAQA,MAAM,UAAd,0BAIZ,cAAC,IAAD,c,GA/EQc,aA8FbsB,eAHS,SAAC9C,EAAO+C,GAAR,MAAsB,CAC1CmB,OAAQlE,EAAM0F,QAAQC,WAEc,CAAEmF,iBhBtEV,SAACtE,GAAD,OAAgB,SAAArD,GAC5CA,EAAS,CACLP,KAAM,oBACN4D,WAAYA,OgBmEL1D,CAA+CuH,GC3FxDU,E,4MACF/K,MAAQ,CACJwG,WAAW,G,EAgBftE,aAAe,SAACuC,GACZ,IAAIH,EAAYhC,IAAQC,IAAI,aAC5B,EAAKb,MAAMsJ,mBAAmBvG,GAC9B,EAAK/C,MAAMuJ,cAAc,EAAKvJ,MAAMqG,KAAMtD,EAAcH,EAAW,EAAKtE,MAAMwG,YAC9E,EAAK9E,MAAMc,QAAQC,KAAK,2B,EAG5ByI,WAAa,WAGT,IAFA,IAAIzG,EAAe,GACf0G,EAAM,EAAKzJ,MAAMsB,KAAK8D,UAAUsE,OAC7B3G,EAAa2G,OAASD,EAAI,GAAG,CAChC,IAAIE,EAAiBC,KAAKC,MAAMD,KAAKE,SAAWL,GAC3C1G,EAAamF,SAASyB,IACvB5G,EAAahC,KAAK4I,GAG1B,EAAK3J,MAAMsJ,mBAAmBvG,GAC9B,EAAK/C,MAAMuJ,cAAc,EAAKvJ,MAAMqG,KAAMtD,EAAcnC,IAAQC,IAAI,aAAc,EAAKvC,MAAMwG,YAC7F,EAAK9E,MAAMc,QAAQC,KAAK,2B,kEA/BK,UAAzBhC,KAAKiB,MAAM8E,WACX/F,KAAKN,SAAS,CACVqG,WAAY,IAGc,QAAzB/F,KAAKiB,MAAM8E,YAChB/F,KAAKN,SAAS,CACVqG,WAAY,IAGpB/F,KAAKiB,MAAM+J,iBAAiBhL,KAAKT,MAAMwG,WAAYlE,IAAQC,IAAI,UAAWD,IAAQC,IAAI,gB,+BAwBtF,OACI,gCAEE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,oDAAuB9B,KAAKiB,MAAM8E,cAClC,cAAC,IAAD,CAAQvF,QAASR,KAAKyK,WAAYxK,MAAM,UAAxC,yBACCD,KAAKiB,MAAMsB,MAAQ,cAAC,EAAD,CAAcA,KAAMvC,KAAKiB,MAAMsB,KAAK8D,UAAWtC,OAAU/D,KAAKyB,yB,GA9ClEV,aAgEjBsB,eAPS,SAAA9C,GAAK,MAAK,CAC9BgD,KAAMhD,EAAMiD,MAAM6D,UAClBpB,QAAS1F,EAAM0F,QAAQC,QACvBa,WAAYxG,EAAM0F,QAAQc,WAC1BuB,KAAM/H,EAAM0F,QAAQqC,QAGgB,CAAE0D,iBZ/CV,SAACjF,EAAYpC,EAAQE,GAArB,OAAmC,SAAAnB,GAE/DW,MAAM,6EAA6DQ,EAA7D,mBAAiFF,EAAjF,uBAAsGoC,IACvGzC,MAAK,SAAA+B,GAAG,OAAIA,EAAI7B,UAChBF,MAAK,SAAAf,GAAI,OAAIG,EAAS,CACnBP,KAAM,kBACNmD,QAAS/C,SYyCuCiI,cjB/B/B,SAAClD,EAAMtD,EAAcmB,EAAWY,GAAhC,OAA+C,SAAArD,GACxE,IACIH,EAAO,CACPsB,UAAWsB,EACXxB,OAAQ2D,EACRjB,UAAWrC,EACX+B,WAAYA,GAEhB1C,MAAM,6DAPO,cAAgB8B,GAOyC,CAClEpC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUZ,KAEpBe,MAAK,SAAA+B,GAAG,OAAIA,EAAI7B,UAChBF,MAAK,SAAAf,GACFG,EAAS,CACLP,KAAM,gBACNmD,QAAS/C,SiBYkDgI,mBjBrCzC,SAACvG,GAAD,OAAkB,SAAAtB,GAChDA,EAAS,CACLP,KAAM,sBACNmD,QAAStB,OiBkCF3B,CAAmFiI,G,QCxE7EW,E,4MAEjB1L,MAAQ,CACJ+J,KAAM,CACF4B,KAAM,K,EAKdC,mBAAqB,SAAC5G,GAClBQ,QAAQC,IAAIT,EAAElD,OAAO+J,MAAM,IAC3B,IAAIF,EAAO3G,EAAElD,OAAO+J,MAAM,GACtBC,EAAS,IAAIC,WAEjBD,EAAOE,cAAcL,GACrBG,EAAOG,iBAAiB,QAAQ,WACxB,EAAK9L,UAAS,SAAAH,GAAK,kCACZA,GADY,IAEf+J,KAAM,CACF4B,KAAM,CAACG,EAAO5H,cAGtB,IAAMgI,EAAMJ,EAAO5H,OAGnB,EAAKxC,MAAMyK,UAAUD,MAEzB,I,uDAMJ,OACI,cAAC,IAAD,CAAehL,GAAG,OACdkL,OACI,sBAAKpL,UAAU,cAAf,UACI,uBAAO6B,SAAUpC,KAAKmL,mBAClBhJ,KAAK,OACL5B,UAAU,oBACVE,GAAG,qBAEP,uBAAOF,UAAU,oBAAoB2B,QAAQ,mBAA7C,4BAKR0J,mBAAmB,a,GA/CI7K,aCuDxB8K,EArDI,SAAC,GAAkB,IAAhBxD,EAAe,EAAfA,SAAe,EACQC,mBAAS,qBADjB,mBAC1BwD,EAD0B,KACTC,EADS,OAECzD,mBAAS,OAFV,mBAE1B0D,EAF0B,KAEfC,EAFe,OAGD3D,mBAAS,IAHR,mBAG1B4D,EAH0B,KAGhBC,EAHgB,OAID7D,mBAAS,IAJR,mBAI1B8D,EAJ0B,KAIhBC,EAJgB,KAMjC,OACI,gCACI,cAAC,EAAD,IACA,eAAC,IAAD,WACI,eAAC,IAAD,CAAQpK,GAAG,IAAX,UACI,4CACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAmBX,MAAOwK,EAAiBrG,OAAK,EAACxF,MAAM,UAAvD,SACK6L,IAEL,eAAC,IAAD,CAAiBhD,OAAK,EAACtI,QAAS,SAAA+D,GAAC,OAAIwH,EAAcxH,EAAElD,OAAOC,QAA5D,UACI,cAAC,IAAD,CAAiBA,MAAO,OAAxB,kBACA,cAAC,IAAD,CAAiBA,MAAO,SAAxB,oBACA,cAAC,IAAD,CAAiBA,MAAO,OAAxB,yBAGR,0CAEA,cAAC,EAAD,CAAWoK,UAAW,SAAAxH,GAAC,OAAIiI,EAAYjI,MACvC,uBACA,wCAEA,cAAC,EAAD,CAAWwH,UAAW,SAAAxH,GAAC,OAAImI,EAAYnI,MAEvC,4CACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAmB5C,MAAO0K,EAAWvG,OAAK,EAACxF,MAAM,UAAjD,SACK+L,IAEL,eAAC,IAAD,CAAiBlD,OAAK,EAACtI,QAAS,SAAA+D,GAAC,OAAI0H,EAAa1H,EAAElD,OAAOC,QAA3D,UACI,cAAC,IAAD,CAAiBA,MAAO,MAAxB,iBACA,cAAC,IAAD,CAAiBA,MAAO,KAAxB,sBAGR,uBACA,cAAC,IAAD,CAAQrB,MAAM,UAAUO,QAAS,kBAAM6H,EAASyD,EAAiBI,EAAUE,EAAUJ,IAArF,iBACA,cAAC,IAAD,CAAQ/L,MAAM,UAAd,qBAIJ,cAAC,IAAD,WCxCVqM,E,4MACF/M,MAAQ,CACJuM,gBAAiB,GACjBS,OAAQ,GACRC,OAAQ,GACRR,UAAW,I,EAQfS,aAAe,SAACC,GACZ,EAAKhN,SAAS,CAAE6M,OAAQG,K,EAG5BC,aAAe,SAACC,GACZ,EAAKlN,SAAS,CAAE8M,OAAQI,K,EAE5BvE,SAAW,SAACyD,EAAiBS,EAAQC,EAAQR,GAEzC,IACI1C,EAAO,CACPzF,UAFYhC,IAAQC,IAAI,aAGxBsC,OAAQmI,EACRjI,OAAQkI,EACRK,OAAQb,EACRjG,WAAY+F,GAEhB,EAAK7K,MAAM6L,eAAexD,GAC1B,EAAKrI,MAAM8L,eAAezD,I,iEAGXpB,GACuB,WAAlClI,KAAKiB,MAAM+L,aAAaxD,QACxBxJ,KAAKiB,MAAMc,QAAQC,KAAK,Y,+BAG5B,OACI,8BACI,cAAC,IAAD,UAEI,cAAC,EAAD,CAAYqG,SAAUrI,KAAKqI,SAAUoE,aAAczM,KAAKyM,aAAcE,aAAc3M,KAAK2M,uB,GA3C9E5L,aA4DhBsB,gBALS,SAAC9C,EAAO+C,GAAR,MAAsB,CAC1C0K,aAAczN,EAAMiD,MAAMyK,YAIU,CAAEH,ef5DZ,SAACrD,GAAD,OAAc,SAAA/G,GACxCW,MAAM,qDAAgD,CAClDN,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUsG,KAEpBnG,MAAK,SAAA+B,GAAG,OAAIA,EAAI7B,UAChBF,MAAK,SAAAf,GACFG,EAAS,CACLP,KAAM,mBACNmD,QAAS/C,SegDiCwK,efjC5B,SAACtD,GAAD,OAAc,SAAA/G,GACxCW,MAAM,qDAAgD,CAClDN,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUsG,KAEpBnG,MAAK,SAAA+B,GAAG,OAAIA,EAAI7B,UAChBF,MAAK,SAAAf,GACFG,EAAS,CACLP,KAAM,mBACNmD,QAAS/C,UeqBVF,CAA6DiK,GCnE/DY,GAAb,uKAGQ,IAAI3K,EAAOvC,KAAKiB,MAAMgE,QACtB,OACI,gCACI,cAAC,EAAD,IACA,eAAC,IAAD,WACA,iEACA,sDAEK1C,GAAQA,EAAK0B,KAAI,SAAAkJ,GAAI,OAAI,mCAAMA,EAAN,aAG9B,mBAAG7M,KAAK,WAAR,0CAdhB,GAAkCS,aA0BnBsB,gBAJS,SAAA9C,GAAK,MAAK,CAC9B0F,QAAS1F,EAAM0F,QAAQoB,aAGZhE,CAA0B6K,IC3BpBE,G,kLAEbvL,IAAQwL,OAAO,QACfxL,IAAQwL,OAAO,aACfxL,IAAQwL,OAAO,UACfrN,KAAKiB,MAAMc,QAAQC,KAAK,O,+BAQxB,OACI,4B,GAdwBjB,aCIfuM,G,uKAGb,IAAI1L,EAAOC,IAAQC,IAAI,QACnBxC,EAAkB,MAATsC,EAAe2L,EAAsB,MAAT3L,EAAe4L,EAAWC,EACnE,OACI,8BACI,eAAC,IAAD,WACK,cAACnO,EAAD,IACD,cAAC,IAAD,UACI,eAAC,IAAD,WACI,yCACA,uBACA,cAAC,IAAD,CAAUuJ,MAAM,eAAenD,KAAK,iBACpC,cAAC,IAAD,CAAUmD,MAAM,WAAWnD,KAAK,gBAChC,cAAC,IAAD,CAAUvD,KAAK,WAAW0G,MAAM,WAAWnD,KAAK,6B,GAfvC3E,aC+CtB2M,G,uKA/BX,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO7M,OAAK,EAAC+C,KAAK,IAAI+J,UAAW3M,IACjC,cAAC,IAAD,CAAO4C,KAAK,UAAU+J,UAAWP,KACjC,cAAC,IAAD,CAAOxJ,KAAK,WAAW+J,UAAWL,KAElC,cAAC,IAAD,CAAOzM,OAAK,EAAC+C,KAAK,SAAS+J,UAAWC,IACtC,cAAC,IAAD,CAAOhK,KAAK,iBAAiB+J,UAAW1E,IACxC,cAAC,IAAD,CAAOrF,KAAK,gBAAgB+J,UAAWjE,IAEvC,cAAC,IAAD,CAAO9F,KAAK,mBAAmB+J,UAAW/I,IAC1C,cAAC,IAAD,CAAO/D,OAAK,EAAC+C,KAAK,WAAW+J,UAAWhI,IACxC,cAAC,IAAD,CAAO/B,KAAK,WAAY+J,UAAW7G,IAEnC,cAAC,IAAD,CAAOjG,OAAK,EAAC+C,KAAK,yBAAyB+J,UAAW/D,IACtD,cAAC,IAAD,CAAOhG,KAAK,uBAAuB+J,UAAWE,IAC9C,cAAC,IAAD,CAAOhN,OAAK,EAAC+C,KAAK,WAAW+J,UAAWG,IACxC,cAAC,IAAD,CAAOjN,OAAK,EAAC+C,KAAK,8BAA8B+J,UAAWrD,IAC3D,cAAC,IAAD,CAAOzJ,OAAK,EAAC+C,KAAK,oBAAoB+J,UAAWrB,KACjD,cAAC,IAAD,CAAOzL,OAAK,EAAC+C,KAAK,yBAAyB+J,UAAWT,KAEtD,cAAC,IAAD,CACEa,OAAQ,WACN,OAAO,qD,GAzBEC,IAAMjN,W,kBCrBrBkN,GAAY,CACdC,MAAO,IAcIC,GAXS,WAAgC,IAA/B5O,EAA8B,uDAAtB0O,GAAWG,EAAW,uCACnD,OAAOA,EAAOjM,MACV,IAAK,aACD,kCACO5C,GADP,IAEI2O,MAAOE,EAAO9I,UAEtB,QACI,OAAO/F,ICZb0O,GAAY,CACd5H,UAAW,GACX5D,QAAS,IA6BE4L,GA1BS,WAAgC,IAA/B9O,EAA8B,uDAAtB0O,GAAWG,EAAW,uCACnD,OAAQA,EAAOjM,MACX,IAAK,gBACD,OAAO,2BACA5C,GADP,IAEIkD,QAAS2L,EAAO9I,UAExB,IAAK,kBACD,OAAO,2BACA/F,GADP,IAEI8G,UAAW+H,EAAO9I,UAE1B,IAAK,mBAKL,IAAK,mBACD,OAAO,2BACA/F,GADP,IAEI0N,SAAUmB,EAAO9I,UAEzB,QACI,OAAO/F,IC5Bb0O,GAAY,CACd1L,KAAM,IAmBK+L,GAhBK,WAAgC,IAA/B/O,EAA8B,uDAAtB0O,GAAWG,EAAW,uCAC/C,OAAQA,EAAOjM,MACX,IAAK,YAKL,IAAK,aACD,OAAO,2BACA5C,GADP,IAEIgD,KAAM6L,EAAO9I,UAErB,QACI,OAAO/F,ICjBb0O,GAAY,CACd/I,QAAS,GACToC,KAAM,GACNvB,WAAY,EACZM,UAAW,MA4CAkI,GAzCS,WAAgC,IAA/BhP,EAA8B,uDAAtB0O,GAAWG,EAAW,uCACnD,OAAQA,EAAOjM,MACX,IAAK,mBAKL,IAAK,eACD,OAAO,2BACA5C,GADP,IAEI2F,QAASkJ,EAAO9I,UAExB,IAAK,gBACD,OAAO,2BACA/F,GADP,IAEI+H,KAAM8G,EAAOzK,SAErB,IAAK,oBACD,OAAO,2BACApE,GADP,IAEIwG,WAAYqI,EAAOrI,aAE3B,IAAK,sBACD,OAAO,2BACAxG,GADP,IAEI8G,UAAW+H,EAAO9I,UAE1B,IAAK,oBACD,OAAO,2BACA/F,GADP,IAEIwG,WAAYqI,EAAOrI,aAE3B,IAAK,gBACD,OAAO,2BACAxG,GADP,IAEI8G,UAAW+H,EAAO9I,UAE1B,QACI,OAAO/F,IChCJiP,GAPKC,aAAgB,CAChCC,QAASP,GACT3L,MAAM6L,GACNxG,KAAKyG,GACLrJ,QAAS0J,KCLPC,GAAa,CAACC,MAGLC,GAFDC,aAAYP,GAFL,GAEgCQ,KAAe,WAAf,EAAmBJ,KCoDzDK,G,4MAhDb1P,MAAQ,CACNC,WAAY,I,EAGdC,eAAiB,SAAAD,GAAU,OAAI,kBAC7B,EAAKE,UAAS,SAAAC,GAAS,MAAK,CAC1BH,WAAYG,EAAUH,aAAeA,EAAaA,EAAa,S,EAGnEI,cAAgB,SAAAC,GAAM,OAAI,WAAO,IACvBL,EAAe,EAAKD,MAApBC,WACRM,OAAOC,SAAS,EAAG,GACnBP,IAAeK,GAAU,EAAKH,SAAS,CAAEF,WAAY,O,uDAQxCQ,KAAKP,eAAe,sBAIVO,KAAKT,MAApBC,WAER,OACE,cAAC,IAAD,CAAUsP,MAAOI,GAAjB,SACE,cAAC,IAAD,UACA,sBAAK3O,UAAU,SAAf,UACM,uBACA,cAAC,GAAD,IACA,uBACF,cAAC,IAAD,CAAWN,MAAM,WAAjB,SACE,sBAAKM,UAAU,yCAAf,mBACU,IAAI4O,MAAOC,cADrB,cAEA,mBAAG9O,KAAK,8BAAR,+C,GArCIS,aCCZsO,GAAcC,QACW,cAA7BxP,OAAOiI,SAASwH,UAEe,UAA7BzP,OAAOiI,SAASwH,UAEhBzP,OAAOiI,SAASwH,SAASC,MACvB,2DA6BN,SAASC,GAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTpM,MAAK,SAAAwM,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzQ,QACfoQ,UAAUC,cAAcO,WAK1BpL,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBoL,OAAM,SAAAC,GACLtL,QAAQsL,MAAM,4CAA6CA,MC5DjEC,IAASvC,OAAQ,cAAC,GAAD,IAAUwC,SAASC,eAAe,SDUpC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,GAAwB5Q,OAAOiI,UAC3C4I,SAAW7Q,OAAOiI,SAAS4I,OAIvC,OAGF7Q,OAAO0L,iBAAiB,QAAQ,WAC9B,IAAMkE,EAAK,UAAMgB,GAAN,sBAENrB,GAwCX,SAAiCK,GAE/BrM,MAAMqM,GACHpM,MAAK,SAAAC,GAGkB,MAApBA,EAASiG,SACuD,IAAhEjG,EAASP,QAAQlB,IAAI,gBAAgB8O,QAAQ,cAG7CjB,UAAUC,cAAciB,MAAMvN,MAAK,SAAAwM,GACjCA,EAAagB,aAAaxN,MAAK,WAC7BxD,OAAOiI,SAASgJ,eAKpBtB,GAAgBC,MAGnBU,OAAM,WACLrL,QAAQC,IACN,oEAzDAgM,CAAwBtB,GAHxBD,GAAgBC,OCxBxBuB,K","file":"static/js/main.a7d364bf.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"#61DAFB\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z\"\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  cx: 420.9,\n  cy: 296.5,\n  r: 45.7\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M520.5 78.1z\"\n}));\n\nfunction SvgLogo(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 841.9 595.3\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";\nexport { ForwardRef as ReactComponent };","const server = \"35.247.159.114:8000\";\r\n\r\nexport const logIn = (username, password) => dispatch => {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"text/plain\");\r\n    let data = {\r\n        \"username\": username,\r\n        \"password\": password\r\n      }\r\n    var requestOptions = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: JSON.stringify(data),\r\n        redirect: 'follow'\r\n    };\r\n    fetch(\"http://35.247.159.114:8000/backend/user/login\", requestOptions)\r\n        .then(response => response.json())\r\n        .then(result => {\r\n          Cookies.set('userid',result.userid, {path: '/'})\r\n          Cookies.set('sessionid',result.sessionid, {path: '/'})\r\n          Cookies.set('role',result.role, {path: '/'})            \r\n    })\r\n}\r\n\r\nexport const fetchAllUser = (role,sessionid) => dispatch => {\r\n    fetch(\"http://\"+ server + `/backend/user/multi/get?sessionid=${sessionid}&role=${role}`)\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FETCH_ALL',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\nexport const createAcc = (postData) => dispatch => {\r\n    fetch(\"http://\"+ server + '/backend/user/create', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            dispatch({\r\n                type: 'CREATE_ACC',\r\n                payload: data\r\n            })\r\n        })\r\n}","import React, { Component } from 'react'\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBFooter, MDBNavLink } from 'mdbreact';\r\n\r\nclass Navbar extends Component {\r\n    state = {\r\n        collapseID: ''\r\n      };\r\n    \r\n      toggleCollapse = collapseID => () =>\r\n        this.setState(prevState => ({\r\n          collapseID: prevState.collapseID !== collapseID ? collapseID : ''\r\n        }));\r\n    \r\n      closeCollapse = collID => () => {\r\n        const { collapseID } = this.state;\r\n        window.scrollTo(0, 0);\r\n        collapseID === collID && this.setState({ collapseID: '' });\r\n      };\r\n    \r\n    render() {\r\n        const { collapseID } = this.state;\r\n        const overlay = (\r\n            <div\r\n              id='sidenav-overlay'\r\n              style={{ backgroundColor: 'transparent' }}\r\n              onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n            />\r\n          );\r\n        return (\r\n            <div>\r\n            <MDBNavbar color='indigo' dark expand='md' fixed='top' scrolling>\r\n              <MDBNavbarBrand href='/' className='py-0 font-weight-bold'>\r\n              </MDBNavbarBrand>\r\n              <MDBNavbarToggler\r\n                onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n              />\r\n              <MDBCollapse id='mainNavbarCollapse' isOpen={collapseID} navbar>\r\n                <MDBNavbarNav right>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink\r\n                      exact\r\n                      to='/'\r\n                      onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                    >\r\n                      <strong>Home</strong>\r\n                    </MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink\r\n                      onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                      to='/about'\r\n                    >\r\n                      <strong>About</strong>\r\n                    </MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink\r\n                      onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                      to='/patient'\r\n                    >\r\n                      <strong>Patient Home</strong>\r\n                    </MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink\r\n                      onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                      to='/medical'\r\n                    >\r\n                      <strong>Medical Home</strong>\r\n                    </MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink\r\n                      onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                      to='/admin'\r\n                    >\r\n                      <strong>Admin Home</strong>\r\n                    </MDBNavLink>\r\n                  </MDBNavItem>\r\n                  {/* <MDBNavItem>\r\n                    <MDBNavLink\r\n                      onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                      to='/medicalAssignlevel'\r\n                    >\r\n                      <strong>medicalAssignlevel</strong>\r\n                    </MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink\r\n                      onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                      to='/patient'\r\n                    >\r\n                      <strong>patientHome</strong>\r\n                    </MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink\r\n                      onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                      to='/patientGamepage'\r\n                    >\r\n                      <strong>patientGamepage</strong>\r\n                    </MDBNavLink>\r\n                  </MDBNavItem> */}\r\n                </MDBNavbarNav>\r\n              </MDBCollapse>\r\n            </MDBNavbar>\r\n           \r\n           \r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react'\r\nimport Card from '../components/Card'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBCard, MDBCardBody, MDBIcon } from 'mdbreact'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { logIn } from '../Redux/Actions/UsersAction'\r\nimport Navbar from '../components/share/Navbar'\r\n// import Footer from '../components/share/Footer'\r\nimport { useHistory, Redirect } from 'react-router-dom'\r\nimport Cookies from 'js-cookie'\r\n\r\nimport '../styling/home.css';\r\nimport '../styling/index.css';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n      super(props)   \r\n      this.state = {\r\n         username: '',\r\n         password: '',    \r\n      }\r\n    }\r\n    \r\n    componentDidMount() {\r\n      let role = Cookies.get('role')\r\n      let sessionid = Cookies.get('sessionid')\r\n      if (sessionid) {\r\n          if (role == 0) {\r\n            this.props.history.push('/patient')\r\n          }\r\n          else if (role == 1){\r\n            this.props.history.push('/medical')\r\n          }\r\n          else if (role == 2){\r\n            this.props.history.push('/admin')\r\n          }\r\n        }\r\n      }\r\n\r\n    handleUsernameChange = (event) => {\r\n      this.setState({\r\n        username: event.target.value\r\n      })\r\n    }\r\n    handlePasswordChange = (event) => {\r\n      this.setState({\r\n        password: event.target.value\r\n      })\r\n    }\r\n    handleSubmit = (event) => {   \r\n      event.preventDefault()\r\n      this.props.logIn(this.state.username, this.state.password)   \r\n      let role = Cookies.get('role')\r\n      if (role == 0) {\r\n        this.props.history.push('/patient')\r\n      }\r\n      else if (role == 1){\r\n        this.props.history.push('/medical')\r\n      }\r\n      else if (role == 2){\r\n        this.props.history.push('/admin')\r\n      }\r\n    }\r\n\r\n    render() {\r\n      const {username, password} = this.state\r\n        return (\r\n          <MDBContainer className=\"bg\">  \r\n            <Navbar />  \r\n            <MDBRow>\r\n              <MDBCol  className=\"lForm\" md=\"6\">\r\n                <MDBCard>\r\n                  <MDBCardBody className=\"mx-4\">\r\n                    <h2 className=\"h4 text-center py-4\">Flip flop mental rotational</h2>    \r\n                    <p className=\"title\">Login</p>\r\n                    {/* <hr></hr> */}\r\n                    <form onClick={this.handleSubmit}>\r\n                      <label htmlFor=\"username\">Username</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"defaultFormCardNameEx\"\r\n                        className=\"form-control\"\r\n                        value={username}\r\n                        onChange={this.handleUsernameChange}\r\n                      />\r\n                      <label className=\"pwd\" htmlFor=\"password\">Password</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"defaultFormCardNameEx\"\r\n                        className=\"form-control\"\r\n                        value={password}\r\n                        onChange={this.handlePasswordChange}\r\n                      />\r\n                    <div className=\"text-center mt-4\">\r\n                      <MDBBtn className=\"mb-3\" type=\"submit\">\r\n                        Log In\r\n                      </MDBBtn>\r\n                    </div>\r\n                    </form>\r\n                  </MDBCardBody>\r\n                </MDBCard>\r\n              </MDBCol>\r\n            </MDBRow>\r\n          </MDBContainer>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  data: state.quest.results,\r\n});\r\n\r\nexport default connect(mapStateToProps, { logIn }) (Home);","import React from 'react';\r\nimport { MDBTable, MDBTableHead, MDBTableBody,MDBBtn } from 'mdbreact';\r\n\r\nexport const QuestionList = ({ data, submit }) => {\r\n    let questionList = [];\r\n\r\n    return (\r\n        <div>\r\n            <MDBTable >\r\n                <MDBTableHead>\r\n                    <tr>\r\n                        <th>Select</th>\r\n                        <th>Question number</th>                        \r\n                        <th>Question image 1</th>\r\n                        <th>Question image 2</th>                        \r\n                    </tr>\r\n                </MDBTableHead>\r\n                <MDBTableBody>\r\n                    {data && data.map(x => {\r\n                        let img_src1 = \"data:image/jpeg;base64,\" + x.qnimg1;\r\n                        let img_src2 = \"data:image/jpeg;base64,\" + x.qnimg2;  \r\n                        return (                            \r\n                            <tr key={x.quimg1}>\r\n                                <td><input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"\r\n                                    id=\"rowcheck{user.id}\"\r\n                                    onChange={(e) => questionList.push(x.questionid)}\r\n                                    /></td>                              \r\n                                <td>{x.questionid}</td>\r\n                                <td><img src={img_src1}/></td> \r\n                                <td><img src={img_src2}/></td> \r\n\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                    <MDBBtn size=\"sm\" color=\"blue\" onClick={() => submit(questionList)} > Assign </MDBBtn>\r\n                </MDBTableBody>\r\n            </MDBTable>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport Navbar from '../../components/share/Navbar'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn } from 'mdbreact'; \r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { fetchPatientResult } from '../../Redux/Actions/PatientAction';\r\nimport Cookies from 'js-cookie'\r\n\r\nclass patientGamepage extends Component {\r\n    componentDidMount(){\r\n        this.RetrieveData()\r\n    }\r\n    RetrieveData = () => {\r\n        let sessionid = Cookies.get('sessionid')\r\n        let userid = Cookies.get('userid')\r\n        this.props.fetchPatientResult(sessionid,userid)\r\n    }\r\n    render() {\r\n        let result = this.props.result.results\r\n        console.log(result)\r\n        return (\r\n            <div>\r\n                <MDBContainer>\r\n                <Navbar/>\r\n                <p  className=\"h2 font-weight-bold\">Thank you for your participation</p>\r\n                <br/>\r\n                <p  className=\"h2 font-weight-bold\">Your result is : </p>\r\n            </MDBContainer>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\npatientGamepage.propTypes = {\r\n    fetchPatientResult: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    result: state.patient.display,\r\n});\r\nexport default connect(mapStateToProps, { fetchPatientResult })(patientGamepage)","import { QuestionList } from \"../../components/Medical/QuestionList\";\r\n\r\nconst server = \"35.247.159.114:8000\";\r\n\r\nexport const fetchDifficulty = (sessionID, userID) => dispatch => {\r\n    let params = \"?sessionid=\" + sessionID + \"&userid=\" + userID\r\n    fetch(\"http://\"+ server + \"/backend/question/assign/get\" + params)\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FETCH_DIFFICULTY',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\nexport const fetchPatientResult = (sessionID, userID) => dispatch => {\r\n    let params = \"?sessionid=\" + sessionID + \"&userid=\" + userID\r\n    fetch(\"http://\"+ server + \"/backend/question/result/multi/get\" + params)\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FETCH_DIFFICULTY',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\nexport const assignUserid = (userid) => dispatch => {\r\n    dispatch({\r\n        type: 'ASSIGN_USERID',\r\n        userid: userid\r\n    })\r\n}\r\nexport const assignDifficulty = (difficulty) => dispatch => {\r\n    dispatch({\r\n        type: 'ASSIGN_DIFFICULTY',\r\n        difficulty: difficulty\r\n    })   \r\n}\r\nexport const assignQuestionList = (questionList) => dispatch => {\r\n    dispatch({\r\n        type: 'ASSIGN_QUESTIONLIST',\r\n        payload: questionList\r\n    })   \r\n}\r\nexport const assignPatient = (uuid, questionList, sessionID, difficulty) => dispatch => {\r\n    let params = \"?sessionid=\" + sessionID\r\n    let data = {\r\n        sessionid: sessionID,\r\n        userid: uuid,\r\n        questions: questionList,\r\n        difficulty: difficulty\r\n    }\r\n    fetch(\"http://\"+ server + '/backend/question/assign/create' + params, {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            dispatch({\r\n                type: 'CREATE_LEVELS',\r\n                payload: data\r\n            })\r\n        })\r\n}","import React, { Component } from 'react'\r\nimport { MDBNavbar, MDBNavbarBrand, MDBDropdown, MDBIcon, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBFooter, MDBNavLink } from 'mdbreact';\r\nimport '../../styling/index.css'\r\n\r\nclass Navbar extends Component {\r\n    state = {\r\n        collapseID: ''\r\n    };\r\n\r\n    toggleCollapse = collapseID => () =>\r\n        this.setState(prevState => ({\r\n            collapseID: prevState.collapseID !== collapseID ? collapseID : ''\r\n        }));\r\n\r\n    closeCollapse = collID => () => {\r\n        const { collapseID } = this.state;\r\n        window.scrollTo(0, 0);\r\n        collapseID === collID && this.setState({ collapseID: '' });\r\n    };\r\n\r\n    render() {\r\n        const { collapseID } = this.state;\r\n        const overlay = (\r\n            <div\r\n                id='sidenav-overlay'\r\n                style={{ backgroundColor: 'transparent' }}\r\n                onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n            />\r\n        );\r\n        return (\r\n            <div>\r\n                <MDBNavbar light expand='md' fixed='top' scrolling>\r\n                    <MDBNavbarBrand href='/' className='py-0 font-weight-bold'>\r\n                    </MDBNavbarBrand>\r\n                    <MDBNavbarToggler className=\"toggler\"\r\n                        onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n                    />\r\n                    <MDBCollapse id='mainNavbarCollapse' isOpen={collapseID} navbar>\r\n                        <MDBNavbarNav right>\r\n                            <MDBNavItem>\r\n                                <MDBNavLink\r\n                                    exact\r\n                                    to='/patient'\r\n                                    onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                >\r\n                                    <strong>Game</strong>\r\n                                </MDBNavLink>\r\n                            </MDBNavItem>\r\n                            <MDBNavItem>\r\n                                <MDBNavLink\r\n                                    onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                    to='/results'\r\n                                >\r\n                                    <strong>Results</strong>\r\n                                </MDBNavLink>\r\n                            </MDBNavItem>\r\n\r\n                            <MDBNavItem>\r\n                                <MDBDropdown>\r\n                                    <MDBDropdownToggle nav caret>\r\n                                        <MDBIcon icon=\"user\" /> {\"Profile\"}\r\n                                    </MDBDropdownToggle>\r\n                                    <MDBDropdownMenu className=\"dropdown-default\">\r\n                                        <MDBDropdownItem href=\"/profile\">Profile</MDBDropdownItem>\r\n                                        <MDBDropdownItem href='/logout'>Logout</MDBDropdownItem>\r\n                                    </MDBDropdownMenu>\r\n                                </MDBDropdown>\r\n                            </MDBNavItem>\r\n                        </MDBNavbarNav>\r\n                    </MDBCollapse>\r\n                </MDBNavbar>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react'\r\nimport Navbar from '../../components/Patient/Navbar'\r\nimport Footer from '../../components/share/Footer';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCardText, MDBCard, MDBCardHeader, MDBCardBody, MDBCardTitle } from 'mdbreact';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { fetchDifficulty } from '../../Redux/Actions/PatientAction';\r\nimport Cookies from 'js-cookie'\r\nimport '../../styling/index.css'\r\nimport '../../styling/home.css'\r\n\r\n\r\n\r\nclass patientHome extends Component {\r\n    componentDidMount() {\r\n        this.RetrieveQuestion()\r\n    }\r\n    RetrieveQuestion = () => {\r\n        let sessionID = Cookies.get('sessionid')\r\n        let userID = Cookies.get('userid')\r\n        this.props.fetchDifficulty(sessionID, userID)\r\n    }\r\n    render() {\r\n        let assignments = this.props.difficulty.assignments\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <div className=\"header\">\r\n                    <p>Home</p>\r\n                </div>\r\n                {/* <br></br> */}\r\n                <MDBContainer fluid>\r\n                    <div className=\"body\">\r\n                    <MDBRow>\r\n                        <MDBCol  className=\"content\" md=\"8\">\r\n                            <MDBCard>\r\n                                <MDBCardBody>\r\n                                <p className=\"h2 font-weight-bold\">The doctor has assign you a game</p>\r\n                                <br></br>\r\n                                <p className=\"h4 font-weight-bold\">DIFFICULTY : </p>\r\n                                {assignments && assignments.map(x => {\r\n                                    return (\r\n                                        <MDBContainer>\r\n                                            <MDBRow>\r\n                                                <MDBCol size=\"3\">\r\n                                                    <MDBCard style={{ width: \"22rem\", marginTop: \"1rem\" }}>\r\n                                                        <MDBCardHeader color=\"blue lighten-1\">Assignment No. {x.assignmentid}</MDBCardHeader>\r\n                                                        <MDBCardBody>\r\n                                                            <MDBCardTitle>{x.questions}</MDBCardTitle>\r\n                                                            <MDBCardText>\r\n                                                                With supporting text below as a natural lead-in to additional\r\n                                                                content.\r\n                                                            </MDBCardText>\r\n                                                        </MDBCardBody>\r\n                                                    </MDBCard>\r\n                                                </MDBCol>\r\n                                            </MDBRow>\r\n                                        </MDBContainer>\r\n                                    )\r\n                                })}\r\n                                <div className=\"text-center mt-4\">\r\n                                    <MDBBtn className=\"mb-3\">\r\n                                        Play Game\r\n                                    </MDBBtn>\r\n                                </div>\r\n                                </MDBCardBody>\r\n                            </MDBCard>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    </div>\r\n                </MDBContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\npatientHome.propTypes = {\r\n    fetchDifficulty: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    difficulty: state.patient.display,\r\n});\r\nexport default connect(mapStateToProps, { fetchDifficulty })(patientHome)","import React, { Component } from 'react'\r\nimport { MDBFooter} from 'mdbreact';\r\n\r\nexport default class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MDBFooter color='indigo'>\r\n              <p className='footer-copyright mb-0 py-3 text-center'>\r\n                &copy; {new Date().getFullYear()} Copyright:\r\n              <a href='https://www.MDBootstrap.com'> MDBootstrap.com </a>\r\n              </p>\r\n            </MDBFooter>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { MDBTable, MDBTableHead, MDBTableBody } from 'mdbreact';\r\n\r\n\r\nconst ResultTable = ({results}) => {\r\n\r\n    return (\r\n        <div>\r\n            {/* scrollY */}\r\n            <MDBTable striped >\r\n                <MDBTableHead>\r\n                    <tr>\r\n                        <th>Assignment ID</th>\r\n                        <th>Difficulty Level</th>\r\n                        <th>Score</th>\r\n                        <th>Date</th>\r\n                        <th>Duration</th>\r\n                    </tr>\r\n                </MDBTableHead>\r\n                <MDBTableBody>\r\n                    {results && results.map(x => {\r\n                        return (\r\n                            <tr key={x.resultid}>\r\n                                <td>{x.resultid}</td>\r\n                                <td>{\"null\"}</td>\r\n                                <td>{`${x.qnscorrect}/${x.qnsanswered}`}</td>\r\n                                <td>{x.attemptdatetime}</td>\r\n                                <td>{x.completiontime === null ? \"null\" : x.completiontime}</td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </MDBTableBody>\r\n            </MDBTable>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultTable\r\n","const server = \"35.247.159.114:8000\";\r\n\r\nexport const fetchResults = (userid,sessionid) => dispatch => {\r\n    fetch(\"http://\"+ server + `/backend/question/result/multi/get?sessionid=${sessionid}&userid=${userid}`)\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FETCH_RESULTS',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\nexport const createQuestion = (postData) => dispatch => {\r\n    fetch(\"http://\"+ server + '/backend/question/create', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            dispatch({\r\n                type: 'CREATE_QUESTIONS',\r\n                payload: data\r\n            })\r\n        })\r\n}\r\n\r\nexport const fetchAllQuestion = (difficulty, userid, sessionid) => dispatch => {\r\n    // fetch(\"http://35.247.159.114:8000/backend/question/multi/get?sessionid=jdjbu19vy3w3vzxswlm8wpm7r1rznlos&userid=5c4cd713-274f-423d-8151-4faec2f14368&difficulty=0\")\r\n    fetch(\"http://\"+ server + `/backend/question/multi/get?sessionid=${sessionid}&userid=${userid}&difficulty=${difficulty}`)\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FETCH_QUESTIONS',\r\n            payload: data\r\n        }))\r\n}\r\n\r\nexport const updateQuestion = (postData) => dispatch => {\r\n    fetch(\"http://\"+ server + '/backend/question/update', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            dispatch({\r\n                type: 'UPDATE_QUESTIONS',\r\n                payload: data\r\n            })\r\n        })\r\n}\r\n// export const fetchResults = (postData) => dispatch => {\r\n//     fetch(\"http://\"+ server + '/backend/question/result/multi/get', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//             'content-type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(postData)\r\n//     })\r\n//         .then(res => res.json())\r\n//         .then(data => dispatch({\r\n//             type: 'FETCH_RESULTS',\r\n//             payload: data\r\n//         })\r\n//         );\r\n// }\r\n\r\n","import React, { Component } from 'react'\r\nimport { MDBContainer } from 'mdbreact';\r\nimport Navbar from '../../components/Patient/Navbar';\r\nimport ResultTable from '../../components/Patient/PatientResult/ResultTable';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { fetchResults } from '../../Redux/Actions/QuestionAction';\r\nimport Cookies from 'js-cookie';\r\n\r\nclass Result extends Component {\r\n    componentDidMount() {\r\n        // var d = new Date();\r\n        // d.toLocaleString();\r\n        // let results = this.state.results;\r\n        // results.forEach(x => x.date = d.toString());\r\n        // this.setState({results: results});\r\n        this.props.fetchResults(Cookies.get('userid'),Cookies.get('sessionid'))\r\n    }\r\n\r\n    // componentDidUpdate(prevProps,prevState,snapShot){\r\n    //     if (this.props.data !== prevProps.data){\r\n    //         console.log(this.props.data)\r\n    //     }\r\n    // }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <MDBContainer>\r\n                <h3>Patient result page</h3>\r\n                <hr/>\r\n                { this.props.data &&  <ResultTable results={this.props.data.results}  />  }\r\n\r\n                </MDBContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nResult.propTypes = {\r\n    fetchResults: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    data: state.quest.results,\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchResults })(Result)","import React, { Component } from 'react'\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBFooter, MDBNavLink, MDBDropdown, MDBDropdownItem, MDBDropdownMenu, MDBDropdownToggle, MDBIcon } from 'mdbreact';\r\n\r\nclass Navbar extends Component {\r\n  state = {\r\n    collapseID: ''\r\n  };\r\n\r\n  toggleCollapse = collapseID => () =>\r\n    this.setState(prevState => ({\r\n      collapseID: prevState.collapseID !== collapseID ? collapseID : ''\r\n    }));\r\n\r\n  closeCollapse = collID => () => {\r\n    const { collapseID } = this.state;\r\n    window.scrollTo(0, 0);\r\n    collapseID === collID && this.setState({ collapseID: '' });\r\n  };\r\n\r\n  render() {\r\n    const { collapseID } = this.state;\r\n    const overlay = (\r\n      <div\r\n        id='sidenav-overlay'\r\n        style={{ backgroundColor: 'transparent' }}\r\n        onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n      />\r\n    );\r\n    return (\r\n      <div>\r\n        <MDBNavbar color='indigo' dark expand='md' fixed='top' scrolling>\r\n          <MDBNavbarBrand href='/' className='py-0 font-weight-bold'>\r\n          </MDBNavbarBrand>\r\n          <MDBNavbarToggler\r\n            onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n          />\r\n          <MDBCollapse id='mainNavbarCollapse' isOpen={collapseID} navbar>\r\n            <MDBNavbarNav right>\r\n              <MDBNavItem>\r\n                <MDBNavLink\r\n                  exact\r\n                  to='/admin'\r\n                  onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                >\r\n                  <strong>Home</strong>\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBDropdown>\r\n                  <MDBDropdownToggle nav caret>\r\n                    <MDBIcon icon=\"user\" /> {\"Profile\"}\r\n                  </MDBDropdownToggle>\r\n                  <MDBDropdownMenu className=\"dropdown-default\">\r\n                    <MDBDropdownItem href=\"/profile\">Profile</MDBDropdownItem>\r\n                    <MDBDropdownItem href='/logout'>Logout</MDBDropdownItem>\r\n                  </MDBDropdownMenu>\r\n                </MDBDropdown>\r\n              </MDBNavItem>\r\n            </MDBNavbarNav>\r\n          </MDBCollapse>\r\n        </MDBNavbar>\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport { MDBContainer, MDBBtn, MDBIcon, MDBRow, MDBCol } from 'mdbreact';\r\nimport Navbar from '../../components/Admin/Navbar';\r\nimport Footer from '../../components/share/Footer';\r\n\r\nexport default class Login extends Component {\r\n\r\n    navigate = (e)=> {\r\n        this.props.history.push(`/admin/${e.target.id}`)\r\n        //this.props.history.push('/admin/account')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <h3>Home</h3>\r\n                        <hr />\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol>\r\n                            <MDBBtn id=\"account\" color=\"primary\" onClick={this.navigate} >\r\n                                <MDBIcon icon=\"magic\" className=\"mr-1\" size=\"lg\" /> Create Account\r\n                            </MDBBtn>\r\n                        </MDBCol>\r\n                        <MDBCol>\r\n                        <MDBBtn id=\"upload\" color=\"primary\" onClick={this.navigate} >\r\n                                <MDBIcon icon=\"magic\" className=\"mr-1\" size=\"lg\" /> Upload Question\r\n                            </MDBBtn>\r\n                        </MDBCol>\r\n\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBFooter, MDBNavLink, MDBDropdown, MDBDropdownItem, MDBDropdownMenu, MDBDropdownToggle, MDBIcon } from 'mdbreact';\r\n\r\nclass Navbar extends Component {\r\n  state = {\r\n    collapseID: ''\r\n  };\r\n\r\n  toggleCollapse = collapseID => () =>\r\n    this.setState(prevState => ({\r\n      collapseID: prevState.collapseID !== collapseID ? collapseID : ''\r\n    }));\r\n\r\n  closeCollapse = collID => () => {\r\n    const { collapseID } = this.state;\r\n    window.scrollTo(0, 0);\r\n    collapseID === collID && this.setState({ collapseID: '' });\r\n  };\r\n\r\n  render() {\r\n    const { collapseID } = this.state;\r\n    const overlay = (\r\n      <div\r\n        id='sidenav-overlay'\r\n        style={{ backgroundColor: 'transparent' }}\r\n        onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n      />\r\n    );\r\n    return (\r\n      <div>\r\n        <MDBNavbar color='indigo' dark expand='md' fixed='top' scrolling>\r\n          <MDBNavbarBrand href='/' className='py-0 font-weight-bold'>\r\n          </MDBNavbarBrand>\r\n          <MDBNavbarToggler\r\n            onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n          />\r\n          <MDBCollapse id='mainNavbarCollapse' isOpen={collapseID} navbar>\r\n            <MDBNavbarNav right>\r\n              <MDBNavItem>\r\n                <MDBNavLink\r\n                  exact\r\n                  to='/medical'\r\n                  onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                >\r\n                  <strong>Home</strong>\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBDropdown>\r\n                  <MDBDropdownToggle nav caret>\r\n                    <MDBIcon icon=\"user\" /> {\"Profile\"}\r\n                  </MDBDropdownToggle>\r\n                  <MDBDropdownMenu className=\"dropdown-default\">\r\n                    <MDBDropdownItem href=\"/profile\">Profile</MDBDropdownItem>\r\n                    <MDBDropdownItem href='/logout'>Logout</MDBDropdownItem>\r\n                  </MDBDropdownMenu>\r\n                </MDBDropdown>\r\n              </MDBNavItem>\r\n            </MDBNavbarNav>\r\n          </MDBCollapse>\r\n        </MDBNavbar>\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { MDBTable, MDBTableHead, MDBTableBody,MDBBtn } from 'mdbreact';\r\n\r\nconst patientList = ({ data, assign, view }) => {\r\n\r\n    return (\r\n        <div>\r\n            <MDBTable striped scrollY >\r\n                <MDBTableHead>\r\n                    <tr>\r\n                        <th>User Name</th>\r\n                        <th>Name</th>\r\n                        <th>Assign</th>\r\n                        <th>Results</th>\r\n                    </tr>\r\n                </MDBTableHead>\r\n                <MDBTableBody>\r\n                    {data && data.map(x => {\r\n                        return (\r\n                            <tr key={x.uuid}>\r\n                                <td>{x.username}</td>\r\n                                <td>{x.displayname === null ? \"null\" : x.displayname}</td>\r\n                                <td><MDBBtn size=\"sm\" color=\"blue\" onClick={() => assign(x.username,x.uuid)} > Assign </MDBBtn></td> \r\n                                <td><MDBBtn size=\"sm\" color=\"blue\" onClick={() => view(x.username,x.uuid)} > View Results </MDBBtn></td> \r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </MDBTableBody>\r\n            </MDBTable>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default patientList\r\n","import React, { Component } from 'react'\r\nimport Card from '../../components/Card';\r\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\"\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { fetchAllUser } from '../../Redux/Actions/UsersAction'\r\nimport Navbar from '../../components/Medical/Navbar';\r\nimport Footer from '../../components/share/Footer'\r\nimport PatientList from '../../components/Medical/PatientList';\r\nimport Cookies from 'js-cookie';\r\nimport { assignUserid } from '../../Redux/Actions/PatientAction';\r\n\r\n\r\nclass MedicalHome extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchAllUser(0,Cookies.get(\"sessionid\")); //0 for patient, 1 for medical, 2 for admin\r\n    }\r\n    assign = (username,uid) => {\r\n        this.props.assignUserid(uid)\r\n        this.props.history.push(\"/\"+ username + `/${uid}`  + \"/assign\");\r\n    }\r\n\r\n    view = (username,uid) => {\r\n        this.props.history.push(\"/\"+ username + `/${uid}` + \"/view\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar/> \r\n                <MDBContainer>\r\n                    Medical home page (with patient list)\r\n\r\n                {this.props.data && <PatientList data={this.props.data.users} assign = {this.assign} view = {this.view}/>}\r\n                </MDBContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nMedicalHome.propTypes = {\r\n    fetchAllUser: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    data: state.user.data\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchAllUser, assignUserid}) (MedicalHome);","import React, { Component } from 'react';\r\nimport { MDBContainer } from 'mdbreact';\r\nimport Navbar from '../../components/Medical/Navbar';\r\nimport ResultTable from '../../components/Patient/PatientResult/ResultTable';\r\nimport PropTypes from 'prop-types';\r\nimport Cookies from 'js-cookie';\r\nimport { connect } from 'react-redux';\r\nimport {fetchResults} from '../../Redux/Actions/QuestionAction';\r\n\r\nclass ViewPatientResults extends Component {\r\n    state = {\r\n        username: '',\r\n        userid: ''\r\n    }\r\n    componentDidMount() {\r\n        this.setState({\r\n            username: this.props.history.location.pathname.split('/')[1],\r\n            userid:this.props.history.location.pathname.split('/')[2]\r\n        })\r\n    }\r\n    componentDidUpdate(prevProps,prevState,snapShot){\r\n        if (this.state.userid !== prevState.userid){\r\n            this.props.fetchResults(this.state.userid, Cookies.get('sessionid'))\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <MDBContainer>\r\n\r\n                    <h3>Patient: {this.state.username}</h3>\r\n                    <hr />\r\n                    {this.props.data && <ResultTable results={this.props.data.results} />}\r\n\r\n                </MDBContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nViewPatientResults.propTypes = {\r\n    fetchResults: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    data: state.quest.results,\r\n});\r\nexport default connect(mapStateToProps, { fetchResults })(ViewPatientResults)","// @ts-nocheck\r\nimport React, { useEffect, useState } from 'react';\r\nimport { MDBInputGroup, MDBInput, MDBDropdown, MDBDropdownItem, MDBDropdownMenu, MDBDropdownToggle, MDBRow, MDBBtn } from 'mdbreact';\r\n\r\n\r\nconst AccountForm = ({onSubmit}) => {\r\n    const [name, setName] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [usertype, setUsertype] = useState('Select User Type');\r\n\r\n\r\n    return (\r\n        <div>\r\n            <MDBInput value={name} label=\"Name\" icon=\"address-card\" onChange={e => setName(e.target.value)} />\r\n            <MDBInput value={username}label=\"Username\" icon=\"user-circle\" onChange={e => setUsername(e.target.value)}/>\r\n            <MDBInput type=\"password\" value={password} label=\"Password\" icon=\"unlock-alt\" onChange={e => setPassword(e.target.value)} />\r\n            <MDBRow>\r\n                User Account Type:\r\n                <MDBDropdown size=\"sm\">\r\n                    <MDBDropdownToggle value={usertype} caret color=\"primary\">\r\n                        {usertype}\r\n                    </MDBDropdownToggle>\r\n                    <MDBDropdownMenu basic onClick={ e => setUsertype(e.target.value)}>\r\n                        <MDBDropdownItem value={'Patient'} >Patient</MDBDropdownItem>\r\n                        <MDBDropdownItem divider />\r\n                        <MDBDropdownItem value={'Medical'}>Medical</MDBDropdownItem>\r\n                    </MDBDropdownMenu>\r\n                </MDBDropdown>\r\n                <MDBBtn outline color=\"success\" size=\"sm\" onClick={() => onSubmit(name, username,password,usertype)} >Submit</MDBBtn>\r\n                <MDBBtn outline color=\"danger\" size=\"sm\" onClick={() => {setName(''); setUsername('');setPassword(''); setUsertype('Select User Type')}} >Clear</MDBBtn>\r\n            </MDBRow>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountForm\r\n","import { MDBContainer } from 'mdbreact';\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport AccountForm from '../../components/Admin/AccountForm';\r\nimport Navbar from '../../components/Admin/Navbar';\r\nimport PropTypes from 'prop-types';\r\nimport { createAcc } from '../../Redux/Actions/UsersAction';\r\nimport Cookies from 'js-cookie'\r\n\r\nclass AccountCreation extends Component {\r\n    state = {\r\n        name: '',\r\n        username: '',\r\n        password: '',\r\n        usertype: ''\r\n    }\r\n    onSubmit = (name, username, password, usertype) => {\r\n        if ([name, username, password].some((x) => x === '') || usertype.includes(\"Select\")) { alert(\"Please ensure that there are no empty inputs.\") }\r\n        else {\r\n            let userrole = usertype == \"Patient\" ? \"0\" : usertype == \"Medical\" ? \"1\" : \"2\"\r\n            let sessionID = Cookies.get('sessionid')\r\n            let form = {\r\n                sessionid: sessionID,\r\n                displayname: name,\r\n                username: username,\r\n                password: password,\r\n                role: userrole\r\n            }\r\n            this.props.createAcc(form);\r\n            //need to add validation & response from server (success/user exists?)\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.result.status == 'success')\r\n            this.props.history.push('/admin')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <MDBContainer>\r\n                    <h3>Account Creation</h3>\r\n                    <hr />\r\n                    <AccountForm onSubmit={this.onSubmit} />\r\n                </MDBContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAccountCreation.propTypes = {\r\n    createAcc: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    result: state.user.data,\r\n});\r\nexport default connect(mapStateToProps, { createAcc })(AccountCreation)","import React, { Component } from 'react';\r\nimport Navbar from '../../components/Admin/Navbar';\r\nimport Footer from '../../components/share/Footer';\r\nimport { MDBContainer, MDBCard , MDBCardImage, MDBCardBody, MDBCardTitle,MDBCardText} from 'mdbreact';\r\n\r\nexport default class UploadQuestion extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <MDBContainer>\r\n                <h3>Question Upload & Creation</h3>\r\n                <MDBCard style={{ width: \"22rem\" }}>\r\n        <MDBCardImage className=\"img-fluid\"  waves />\r\n        <MDBCardBody>\r\n          <MDBCardTitle></MDBCardTitle>\r\n          <MDBCardText>\r\n            Email: <br />\r\n                Tutorial Group: \r\n          </MDBCardText>\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n                <hr />\r\n                </MDBContainer>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Navbar from '../../components/Medical/Navbar'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem } from 'mdbreact';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { assignPatient, assignDifficulty } from '../../Redux/Actions/PatientAction';\r\nimport Cookies from 'js-cookie'\r\n\r\nclass medicalAssign extends Component {\r\n    state = {\r\n        username: '',\r\n        userid: '',\r\n        difficulty: 'Easy',\r\n        questionType: 'Automatic'\r\n    }\r\n    checkValidUser = () => {\r\n        // You don't need to put parameters in the link, that makes your life harder. You can just called cookies.get() from anywhere to and validate the role\r\n        let role = Cookies.get('role')\r\n        if(role != '1')\r\n            this.props.history.push('/')\r\n    }\r\n\r\n    textChange = (e) =>{\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n    onClickHandler = event => {\r\n        const value = event.target.innerHTML;\r\n        this.setState({ value })\r\n      }\r\n\r\n    handleDifficultyChange = (event) => {\r\n        this.setState({\r\n          difficulty: event.target.value\r\n        })\r\n      }\r\n\r\n    handleQuestionTypeChange = (event) => {\r\n        this.setState({\r\n          questionType: event.target.value\r\n        })\r\n    }\r\n\r\n    AssignPatient = (username,userid) => {\r\n        // let sessionid = Cookies.get('sessionid')\r\n        // let userid = Cookies.get('userid')\r\n        // const form = {\r\n        //     sessionid,\r\n        //     userid,\r\n        //     ...this.state\r\n        // }\r\n        this.props.assignDifficulty(this.state.difficulty)\r\n        if (this.state.questionType == \"Automatic\"){\r\n            this.props.history.push(\"/\"+ username + \"/\" + userid  + \"/assign/auto\")            \r\n        }\r\n        else {\r\n            this.props.history.push(\"/\"+ username +  \"/\" + userid  + \"/assign/manual\")  \r\n        }\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.result.status == 'success')\r\n            this.props.history.push('/patient')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <MDBContainer>\r\n                    <MDBCol md=\"6\">\r\n                        <form>\r\n                            <p className=\"h3 text-center mb-4\">Assign Task for Patient</p>\r\n                            <div className=\"grey-text\">\r\n                                <h5>Difficulty</h5>\r\n                                <select className=\"browser-default custom-select\" value={this.state.difficulty} onChange={this.handleDifficultyChange}>\r\n                                    <option value=\"Eady\" >Easy</option>\r\n                                    <option value=\"Medium\" >Medium</option>\r\n                                    <option value=\"Hard\">Hard</option>\r\n                                </select>\r\n                                <br />\r\n                                <br />\r\n                                <MDBBtn onClick={this.AssignPatient} color=\"primary\">Confirm</MDBBtn>\r\n                                <MDBBtn color=\"primary\">Back</MDBBtn>\r\n                            </div>\r\n                        </form>\r\n                    </MDBCol>\r\n                    <MDBRow>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nmedicalAssign.propTypes = {\r\n    assignDifficulty: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    result: state.patient.display,\r\n});\r\nexport default connect(mapStateToProps, { assignDifficulty })(medicalAssign)","import React, { Component } from 'react'\r\nimport Navbar from '../../components/Medical/Navbar'\r\nimport Medical from './MedicalHome'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn } from 'mdbreact';\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { fetchAllQuestion } from '../../Redux/Actions/QuestionAction'\r\nimport { assignPatient, assignQuestionList} from '../../Redux/Actions/PatientAction'\r\nimport { QuestionList } from '../../components/Medical/QuestionList';\r\nimport Cookies from 'js-cookie';\r\n\r\nclass medicalAssignAuto extends Component {\r\n    state = {\r\n        difficulty:0\r\n    }\r\n    componentDidMount() {        \r\n        if (this.props.difficulty == \"Medium\"){\r\n            this.setState({\r\n                difficulty: 1\r\n            })\r\n        }\r\n        else if (this.props.difficulty == \"Hard\"){\r\n            this.setState({\r\n                difficulty: 2\r\n            })        \r\n        }\r\n        this.props.fetchAllQuestion(this.state.difficulty, Cookies.get(\"userid\"), Cookies.get(\"sessionid\"),); //0 for easy, 1 for medium, 3 for hard\r\n    }\r\n\r\n    handleSubmit = (questionList) => {\r\n        let sessionid = Cookies.get('sessionid')\r\n        this.props.assignQuestionList(questionList)\r\n        this.props.assignPatient(this.props.uuid, questionList, sessionid, this.state.difficulty);\r\n        this.props.history.push(\"/medical/assign/result\") \r\n    }\r\n\r\n    autoAssign = () => {\r\n        let questionList = []\r\n        let len = this.props.data.questions.length\r\n        while (questionList.length < len/2) {\r\n            let questionNumber = Math.floor(Math.random() * len);\r\n            if (!questionList.includes(questionNumber)) {\r\n                questionList.push(questionNumber)\r\n            }\r\n        }\r\n        this.props.assignQuestionList(questionList)\r\n        this.props.assignPatient(this.props.uuid, questionList, Cookies.get('sessionid'), this.state.difficulty);\r\n        this.props.history.push(\"/medical/assign/result\")\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n              <Navbar/>\r\n              <MDBContainer>                 \r\n                <h1>Difficulty level: {this.props.difficulty}</h1>\r\n                <MDBBtn onClick={this.autoAssign} color=\"primary\">Auto assign</MDBBtn>\r\n                {this.props.data && <QuestionList data={this.props.data.questions} submit = {this.handleSubmit}/>}\r\n              </MDBContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nmedicalAssignAuto.propTypes = {\r\n    fetchAllQuestion: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    data: state.quest.questions,\r\n    patient: state.patient.display,\r\n    difficulty: state.patient.difficulty,\r\n    uuid: state.patient.uuid\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchAllQuestion, assignPatient, assignQuestionList }) (medicalAssignAuto);","import React, { Component } from 'react'\r\nimport { MDBInputGroup, MDBBtn } from 'mdbreact';\r\n\r\nexport default class PicUpload extends Component {\r\n\r\n    state = {\r\n        form: {\r\n            file: []\r\n        }\r\n    }\r\n\r\n    \r\n    onChangeHandleFile = (e) => {\r\n        console.log(e.target.files[0])\r\n        var file = e.target.files[0];\r\n        var reader = new FileReader();\r\n\r\n        reader.readAsDataURL(file);\r\n        reader.addEventListener(\"load\", () => {\r\n                this.setState(state => ({\r\n                    ...state,\r\n                    form: {\r\n                        file: [reader.result]\r\n                    }\r\n                }));\r\n                const url = reader.result;\r\n                //console.log(\"#####\", url);\r\n                //Call Parent Component Method\r\n                this.props.picUpload(url)\r\n            },\r\n            false\r\n        );\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <MDBInputGroup id='file'\r\n                inputs={\r\n                    <div className=\"custom-file\">\r\n                        <input onChange={this.onChangeHandleFile}\r\n                            type=\"file\"\r\n                            className=\"custom-file-input\"\r\n                            id=\"inputGroupFile01\"\r\n                        />\r\n                        <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">\r\n                            Choose file\r\n                        </label>\r\n                    </div>\r\n                }\r\n                containerClassName=\"mb-3\"\r\n            />\r\n        )\r\n    }\r\n}\r\n","import React, { Component, useState } from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem } from 'mdbreact';\r\nimport Navbar from './Navbar';\r\nimport PicUpload from '../share/PicUpload';\r\n\r\nconst CreateQues = ({ onSubmit }) => {\r\n    const [difficultylevel, setDifficulty] = useState(\"Select difficulty\");\r\n    const [identical, setIdentical] = useState('Yes');\r\n    const [picture1, setPicture1] = useState('')\r\n    const [picture2, setPicture2] = useState('')\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <MDBContainer>\r\n                <MDBCol md=\"6\">\r\n                    <h5>Difficulty</h5>\r\n                    <MDBDropdown>\r\n                        <MDBDropdownToggle value={difficultylevel} caret color=\"primary\">\r\n                            {difficultylevel}\r\n                        </MDBDropdownToggle>\r\n                        <MDBDropdownMenu basic onClick={e => setDifficulty(e.target.value)} >\r\n                            <MDBDropdownItem value={'Easy'}>Easy</MDBDropdownItem>\r\n                            <MDBDropdownItem value={'Medium'}>Medium</MDBDropdownItem>\r\n                            <MDBDropdownItem value={'Hard'}> Hard</MDBDropdownItem>\r\n                        </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                    <h5>Question</h5>\r\n                   \r\n                    <PicUpload picUpload={x => setPicture1(x)} />\r\n                    <br />\r\n                    <h5>Answer</h5>\r\n                  \r\n                    <PicUpload picUpload={x => setPicture2(x)} />\r\n                   \r\n                    <h5>Identical?</h5>\r\n                    <MDBDropdown>\r\n                        <MDBDropdownToggle value={identical} caret color=\"primary\">\r\n                            {identical}\r\n                        </MDBDropdownToggle>\r\n                        <MDBDropdownMenu basic onClick={e => setIdentical(e.target.value)}>\r\n                            <MDBDropdownItem value={'Yes'}>Yes</MDBDropdownItem>\r\n                            <MDBDropdownItem value={'No'}>No</MDBDropdownItem>\r\n                        </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                    <br />\r\n                    <MDBBtn color=\"primary\" onClick={() => onSubmit(difficultylevel, picture1, picture2, identical)} >Set</MDBBtn>\r\n                    <MDBBtn color=\"primary\">Back</MDBBtn>\r\n\r\n\r\n                </MDBCol>\r\n                <MDBRow>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default CreateQues","import React, { Component } from 'react'\r\nimport Navbar from '../../components/Medical/Navbar'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBFormInline } from 'mdbreact';\r\nimport Cookies from 'js-cookie';\r\nimport CreateQues from '../../components/Admin/CreateQues';\r\nimport { updateQuestion, createQuestion } from '../../Redux/Actions/QuestionAction';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nclass QuestionCreation extends Component {\r\n    state = {\r\n        difficultylevel: '',\r\n        image1: '',\r\n        image2: '',\r\n        identical: ''\r\n    }\r\n\r\n\r\n    //questionid ?\r\n    //This will be auto generated by the backend, if he complain.\r\n    //Tell him, what so difficult to put AUTO INCREMENT?\r\n\r\n    pictureload1 = (pic1) => {\r\n        this.setState({ image1: pic1 });\r\n    }\r\n\r\n    pictureload2 = (pic2) => {\r\n        this.setState({ image2: pic2 });\r\n    }\r\n    onSubmit = (difficultylevel, image1, image2, identical) => {\r\n        \r\n        let sessionID = Cookies.get('sessionid')\r\n        let form = {\r\n            sessionid: sessionID,\r\n            qnimg1: image1,\r\n            qnimg2: image2,\r\n            answer: identical,\r\n            difficulty: difficultylevel\r\n        }\r\n        this.props.createQuestion(form);\r\n        this.props.updateQuestion(form);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.questionbank.status == \"success\")\r\n            this.props.history.push('/admin')\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MDBContainer>\r\n\r\n                    <CreateQues onSubmit={this.onSubmit} pictureload1={this.pictureload1} pictureload2={this.pictureload2} />\r\n                </MDBContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nQuestionCreation.propTypes = {\r\n    createQuestion: PropTypes.func.isRequired,\r\n    updateQuestion: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    questionbank: state.quest.question,\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, { createQuestion, updateQuestion })(QuestionCreation)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Navbar from '../../components/Medical/Navbar'\r\nimport { MDBContainer, MDBBtn } from 'mdbreact';\r\nexport class AssignResult extends Component {\r\n    \r\n    render() {\r\n        let data = this.props.patient\r\n        return (\r\n            <div>\r\n                <Navbar/> \r\n                <MDBContainer>\r\n                <h4>Questions assigned successful! </h4>\r\n                <ul> Questions assigned: \r\n                    \r\n                    {data && data.map(item => <li> {item} </li> )}\r\n                \r\n                 </ul>\r\n                <a href='/medical'> Back to home page</a>\r\n\r\n                </MDBContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    patient: state.patient.questions\r\n});\r\n\r\nexport default connect(mapStateToProps) (AssignResult);\r\n","import Cookies from 'js-cookie'\r\nimport React, { Component } from 'react'\r\n\r\nexport default class Logout extends Component {\r\n    componentDidMount(){\r\n        Cookies.remove('role');\r\n        Cookies.remove('sessionid');\r\n        Cookies.remove('userid')\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    /**\r\n     * Logout page\r\n     * @returns Logout page\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","import Cookies from 'js-cookie'\r\nimport { MDBCol, MDBContainer, MDBInput, MDBRow } from 'mdbreact'\r\nimport React, { Component } from 'react'\r\nimport patientNav from '../components/Patient/Navbar';\r\nimport staffNav from '../components/Medical/Navbar';\r\nimport adminNav from '../components/Admin/Navbar';\r\n\r\nexport default class Profile extends Component {\r\n\r\n    render() {\r\n        let role = Cookies.get('role')\r\n        let Navbar = role === '0' ? patientNav : role === '1' ? staffNav : adminNav;\r\n        return (\r\n            <div>\r\n                <MDBContainer>\r\n                    {<Navbar />}\r\n                    <MDBRow>\r\n                        <MDBCol>\r\n                            <h3>Profile</h3>\r\n                            <hr/>\r\n                            <MDBInput label=\"Display Name\" icon=\"address-card\" />\r\n                            <MDBInput label=\"Username\" icon=\"user-circle\" />\r\n                            <MDBInput type=\"password\" label=\"Password\" icon=\"unlock-alt\" />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport Home from '../pages/Home';\r\n\r\nimport patientGamepage from '../pages/Patient/patientGamepage';\r\nimport patientHome from '../pages/Patient/patientHome';\r\nimport Result from '../pages/Patient/Result';\r\nimport adminHome from '../pages/Admin/Home';\r\nimport medicalHome from '../pages/Medical/MedicalHome';\r\nimport medicalView from '../pages/Medical/ViewPatientResults';\r\nimport AccountCreation from '../pages/Admin/AccountCreation';\r\nimport UploadQuestion from '../pages/Admin/UploadQuestion';\r\nimport medicalAssign from '../pages/Medical/medicalAssign';\r\nimport medicalAssignAuto from '../pages/Medical/medicalAssignAuto';\r\nimport QuestionCreation from '../pages/Admin/QuestionCreation';\r\nimport AssignResult from '../pages/Medical/AssignResult';\r\nimport Logout from '../pages/Logout';\r\nimport Profile from '../pages/Profile';\r\n\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/logout' component={Logout} />\r\n        <Route path='/profile' component={Profile} />\r\n        {/* admin pages */}\r\n        <Route exact path='/admin' component={adminHome} />\r\n        <Route path='/admin/account' component={AccountCreation} />\r\n        <Route path='/admin/upload' component={UploadQuestion} />\r\n        {/* patient pages */}\r\n        <Route path='/patientGamepage' component={patientGamepage} />\r\n        <Route exact path='/patient' component={patientHome} />\r\n        <Route path='/results'  component={Result} />\r\n        {/* medical pages */}\r\n        <Route exact path='/:username/:uid/assign' component={medicalAssign} />\r\n        <Route path='/:username/:uid/view' component={medicalView} />\r\n        <Route exact path='/medical' component={medicalHome} />\r\n        <Route exact path='/:username/:uid/assign/auto' component={medicalAssignAuto} />\r\n        <Route exact path='/QuestionCreation' component={QuestionCreation} />\r\n        <Route exact path='/medical/assign/result' component={AssignResult} />\r\n\r\n        <Route\r\n          render={function () {\r\n            return <h1>Not Found</h1>;\r\n          }}\r\n        />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","const initState = {\r\n    items: [],\r\n};\r\n\r\nconst TwitterReducers = (state = initState, action) => {\r\n    switch(action.type){\r\n        case 'FETCH_POST':\r\n            return{\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default TwitterReducers;\r\n","const initState = {\r\n    questions: [],\r\n    results: []\r\n};\r\n\r\nconst QuestionReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_RESULTS':\r\n            return {\r\n                ...state,\r\n                results: action.payload\r\n            }\r\n        case 'FETCH_QUESTIONS':\r\n            return {\r\n                ...state,\r\n                questions: action.payload\r\n            }\r\n        case 'CREATE_QUESTIONS':\r\n            return {\r\n                ...state,\r\n                question: action.payload\r\n                }\r\n        case 'UPDATE_QUESTIONS':\r\n            return {\r\n                ...state,\r\n                question: action.payload\r\n                }   \r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default QuestionReducer;\r\n","const initState = {\r\n    data: []\r\n};\r\n\r\nconst UserReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_ALL':\r\n            return {\r\n                ...state,\r\n                data: action.payload\r\n            }\r\n        case 'CREATE_ACC':\r\n            return {\r\n                ...state,\r\n                data: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default UserReducer;\r\n","const initState = {\r\n    display: [],\r\n    uuid: '',\r\n    difficulty: 0,\r\n    questions: null\r\n};\r\n\r\nconst PatientReducers = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_DIFFICULTY':\r\n            return {\r\n                ...state,\r\n                display: action.payload\r\n            }\r\n        case 'FETCH_RESULT':\r\n            return {\r\n                ...state,\r\n                display: action.payload\r\n            }\r\n        case 'ASSIGN_USERID':\r\n            return {\r\n                ...state,\r\n                uuid: action.userid\r\n            }\r\n        case 'ASSIGN_DIFFICULTY':\r\n            return {\r\n                ...state,\r\n                difficulty: action.difficulty\r\n            }\r\n        case 'ASSIGN_QUESTIONLIST':\r\n            return {\r\n                ...state,\r\n                questions: action.payload\r\n            }\r\n        case 'ASSIGN_DIFFICULTY':\r\n            return {\r\n                ...state,\r\n                difficulty: action.difficulty\r\n            }       \r\n        case 'CREATE_LEVELS':\r\n            return {\r\n                ...state,\r\n                questions: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default PatientReducers;\r\n","import { combineReducers } from 'redux';\r\nimport TwitterReducers from './TwitterReducers'\r\nimport QuestionReducer from './QuestionReducer'\r\nimport UserReducer from './UserReducer'\r\nimport PatientReducer from './PatientReducer'\r\n\r\nconst RootReducer = combineReducers({\r\n    twitter: TwitterReducers,\r\n    quest:QuestionReducer,\r\n    user:UserReducer,\r\n    patient: PatientReducer\r\n});\r\n\r\nexport default RootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport RootReducer from '../Reducers/RootReducer'\r\n\r\nconst initialState = {};\r\nconst middleWare = [thunk];\r\nconst store = createStore(RootReducer, initialState, applyMiddleware(...middleWare));\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBFooter, MDBNavLink } from 'mdbreact';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { ReactComponent as Logo } from './assets/logo.svg';\r\nimport Routes from './router/Routes';\r\nimport Store from './Redux/Store/Store';\r\nimport { Provider } from 'react-redux';\r\nimport '../src/styling/index.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    collapseID: ''\r\n  };\r\n\r\n  toggleCollapse = collapseID => () =>\r\n    this.setState(prevState => ({\r\n      collapseID: prevState.collapseID !== collapseID ? collapseID : ''\r\n    }));\r\n\r\n  closeCollapse = collID => () => {\r\n    const { collapseID } = this.state;\r\n    window.scrollTo(0, 0);\r\n    collapseID === collID && this.setState({ collapseID: '' });\r\n  };\r\n\r\n  render() {\r\n    const overlay = (\r\n      <div\r\n        id='sidenav-overlay'\r\n        style={{ backgroundColor: 'transparent' }}\r\n        onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n      />\r\n    );\r\n\r\n    const { collapseID } = this.state;\r\n\r\n    return (\r\n      <Provider store={Store}>\r\n        <Router>\r\n        <div className='flyout'>\r\n              <br />\r\n              <Routes />\r\n              <br/>\r\n            <MDBFooter color=\"#F7FEFF;\">\r\n              <div className='footer-copyright mb-0 py-3 text-center'>\r\n                &copy; {new Date().getFullYear()} Copyright:\r\n              <a href='https://www.MDBootstrap.com'> MDBootstrap.com </a>\r\n              </div>\r\n            </MDBFooter>\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"./styling/index.css\";\r\nimport App from \"./App\";\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render( <App /> , document.getElementById('root'));\r\n\r\nregisterServiceWorker();"],"sourceRoot":""}